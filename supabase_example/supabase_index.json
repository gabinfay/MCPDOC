{
  "total_sections": 102,
  "categories": {
    "Client Setup": [
      {
        "title": "You can initialize a new Supabase client using the `create_client()` method.",
        "line_start": 3,
        "description": "The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem."
      }
    ],
    "Database Operations": [
      {
        "title": "Fetch data: select()",
        "line_start": 48,
        "description": "```python response = ( supabase.table(\"planets\") .select(\"*\") .execute() ) ```"
      },
      {
        "title": "Create data: insert()",
        "line_start": 180,
        "description": "```python response = ( supabase.table(\"planets\") .insert({\"id\": 1, \"name\": \"Pluto\"}) .execute() ) ```"
      },
      {
        "title": "Modify data: update()",
        "line_start": 217,
        "description": "```python response = ( supabase.table(\"instruments\") .update({\"name\": \"piano\"}) .eq(\"id\", 1) .execute() ) ```"
      },
      {
        "title": "Upsert data: upsert()",
        "line_start": 249,
        "description": "```python response = ( supabase.table(\"instruments\") .upsert({\"id\": 1, \"name\": \"piano\"}) .execute() ) ```"
      },
      {
        "title": "Delete data: delete()",
        "line_start": 293,
        "description": "```python response = ( supabase.table(\"countries\") .delete() .eq(\"id\", 1) .execute() ) ```"
      },
      {
        "title": "Postgres functions: rpc()",
        "line_start": 325,
        "description": "You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates."
      },
      {
        "title": "from_.update()",
        "line_start": 2953,
        "description": "Replaces an existing file at the specified path with a new one."
      }
    ],
    "Filters": [
      {
        "title": "Using Filters",
        "line_start": 393,
        "description": "Filters allow you to only return rows that match certain conditions."
      },
      {
        "title": "eq()",
        "line_start": 486,
        "description": "Match only rows where `column` is equal to `value`."
      },
      {
        "title": "neq()",
        "line_start": 507,
        "description": "Match only rows where `column` is not equal to `value`."
      },
      {
        "title": "gt()",
        "line_start": 528,
        "description": "Match only rows where `column` is greather than `value`."
      },
      {
        "title": "gte()",
        "line_start": 549,
        "description": "Match only rows where `column` is greater than or equal to `value`."
      },
      {
        "title": "lt()",
        "line_start": 570,
        "description": "Match only rows where `column` is less than `value`."
      },
      {
        "title": "lte()",
        "line_start": 591,
        "description": "Match only rows where `column` is less than or equal to `value`."
      },
      {
        "title": "like()",
        "line_start": 612,
        "description": "Match only rows where `column` matches `pattern` case-sensitively."
      },
      {
        "title": "ilike()",
        "line_start": 633,
        "description": "Match only rows where `column` matches `pattern` case-insensitively."
      },
      {
        "title": "is_()",
        "line_start": 654,
        "description": "Match only rows where `column` IS `value`."
      },
      {
        "title": "in_()",
        "line_start": 675,
        "description": "Match only rows where `column` is included in the `values` array."
      },
      {
        "title": "contains()",
        "line_start": 696,
        "description": "Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`."
      },
      {
        "title": "contained_by()",
        "line_start": 741,
        "description": "Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`."
      },
      {
        "title": "range_gt()",
        "line_start": 786,
        "description": "Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`."
      },
      {
        "title": "range_gte()",
        "line_start": 807,
        "description": "Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`."
      },
      {
        "title": "range_lt()",
        "line_start": 828,
        "description": "Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`."
      },
      {
        "title": "range_lte()",
        "line_start": 849,
        "description": "Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`."
      },
      {
        "title": "range_adjacent()",
        "line_start": 870,
        "description": "Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges."
      },
      {
        "title": "overlaps()",
        "line_start": 891,
        "description": "Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common."
      },
      {
        "title": "text_search()",
        "line_start": 924,
        "description": "Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`."
      },
      {
        "title": "match()",
        "line_start": 997,
        "description": "Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s."
      },
      {
        "title": "not_()",
        "line_start": 1018,
        "description": "Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values."
      },
      {
        "title": "or_()",
        "line_start": 1039,
        "description": "```python response = ( supabase.table(\"planets\") .select(\"name\") .or_(\"id.eq.2,name.eq.Mars\") .execute() ) ```"
      },
      {
        "title": "filter()",
        "line_start": 1083,
        "description": "```python response = ( supabase.table(\"planets\") .select(\"*\") .filter(\"name\", \"in\", '(\"Mars\",\"Tatooine\")') .execute() ) ```"
      }
    ],
    "Modifiers": [
      {
        "title": "Using Modifiers",
        "line_start": 1115,
        "description": "Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string)."
      },
      {
        "title": "order()",
        "line_start": 1133,
        "description": "Order the query result by `column`."
      },
      {
        "title": "limit()",
        "line_start": 1176,
        "description": "```python response = ( supabase.table(\"planets\") .select(\"name\") .limit(1) .execute() ) ```"
      },
      {
        "title": "range()",
        "line_start": 1208,
        "description": "```python response = ( supabase.table(\"planets\") .select(\"name\") .range(0, 1) .execute() ) ```"
      },
      {
        "title": "single()",
        "line_start": 1240,
        "description": "```python response = ( supabase.table(\"planets\") .select(\"name\") .limit(1) .single() .execute() ) ```"
      },
      {
        "title": "maybe_single()",
        "line_start": 1261,
        "description": "```python response = ( supabase.table(\"planets\") .select(\"*\") .eq(\"name\", \"Earth\") .maybe_single() .execute() ) ```"
      },
      {
        "title": "csv()",
        "line_start": 1282,
        "description": "```python response = ( supabase.table(\"planets\") .select(\"*\") .csv() .execute() ) ```"
      },
      {
        "title": "Using Explain",
        "line_start": 1302,
        "description": "For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes."
      }
    ],
    "Utilities": [
      {
        "title": "Overview",
        "line_start": 1341,
        "description": ""
      },
      {
        "title": "Overview",
        "line_start": 1977,
        "description": ""
      },
      {
        "title": "Overview",
        "line_start": 2097,
        "description": "```python from supabase import create_client from supabase.lib.client_options import ClientOptions"
      },
      {
        "title": "Overview",
        "line_start": 2480,
        "description": "Realtime in Python only works with the asynchronous client. You can initialize a new Supabase client using the `acreate_client()` method."
      }
    ],
    "Authentication": [
      {
        "title": "sign_up()",
        "line_start": 1351,
        "description": "```python response = supabase.auth.sign_up( { \"email\": \"email@example.com\", \"password\": \"password\", } ) ```"
      },
      {
        "title": "sign_in_anonymously()",
        "line_start": 1424,
        "description": "```python response = supabase.auth.sign_in_anonymously( {\"options\": {\"captcha_token\": \"\"}} ) ```"
      },
      {
        "title": "sign_in_with_password",
        "line_start": 1450,
        "description": "```python response = supabase.auth.sign_in_with_password( { \"email\": \"email@example.com\", \"password\": \"example-password\", } ) ```"
      },
      {
        "title": "sign_in_with_id_token",
        "line_start": 1482,
        "description": "```python response = supabase.auth.sign_in_with_id_token( { \"provider\": \"google\", \"token\": \"your-id-token\", } ) ```"
      },
      {
        "title": "sign_in_with_otp",
        "line_start": 1502,
        "description": "```python response = supabase.auth.sign_in_with_otp( { \"email\": \"email@example.com\", \"options\": { \"email_redirect_to\": \"https://example.com/welcome\", }, } ) ```"
      },
      {
        "title": "sign_in_with_oauth",
        "line_start": 1547,
        "description": "```python response = supabase.auth.sign_in_with_oauth( {\"provider\": \"github\"} ) ```"
      },
      {
        "title": "sign_in_with_sso()",
        "line_start": 1592,
        "description": "```python response = supabase.auth.sign_in_with_sso( {\"domain\": \"company.com\"} ) ```"
      },
      {
        "title": "sign_out()",
        "line_start": 1618,
        "description": "```python response = supabase.auth.sign_out() ```"
      },
      {
        "title": "reset_password_for_email()",
        "line_start": 1633,
        "description": "```python supabase.auth.reset_password_for_email( email, { \"redirect_to\": \"https://example.com/update-password\", } ) ```"
      },
      {
        "title": "verify_otp",
        "line_start": 1653,
        "description": "```python response = supabase.auth.verify_otp( { \"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\", } ) ```"
      },
      {
        "title": "get_session",
        "line_start": 1700,
        "description": "```python response = supabase.auth.get_session() ```"
      },
      {
        "title": "refresh_session()",
        "line_start": 1715,
        "description": "Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh_session() will attempt to retrieve it from get_session(). If the current session's refresh token is invalid, an error will be thrown."
      },
      {
        "title": "get_user",
        "line_start": 1733,
        "description": "``` response = supabase.auth.get_user() ```"
      },
      {
        "title": "update_user()",
        "line_start": 1755,
        "description": "```python response = supabase.auth.update_user( {\"email\": \"new@email.com\"} ) ```"
      },
      {
        "title": "get_user_identities()",
        "line_start": 1813,
        "description": "```python response = supabase.auth.get_user_identities() ```"
      },
      {
        "title": "link_identity()",
        "line_start": 1828,
        "description": "```python response = supabase.auth.link_identity( {provider: \"github\"} ) ```"
      },
      {
        "title": "unlink_identity()",
        "line_start": 1845,
        "description": "```python"
      },
      {
        "title": "reauthenticate()",
        "line_start": 1869,
        "description": "```python response = supabase.auth.reauthenticate() ```"
      },
      {
        "title": "resend()",
        "line_start": 1884,
        "description": "```python response = supabase.auth.resend( { \"type\": \"signup\", \"email\": \"email@example.com\", \"options\": { \"email_redirect_to\": \"https://example.com/welcome\", }, } ) ```"
      },
      {
        "title": "set_session()",
        "line_start": 1943,
        "description": "Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown."
      },
      {
        "title": "exchange_code_for_session()",
        "line_start": 1960,
        "description": "```python response = supabase.auth.exchange_code_for_session( {\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"} ) ```"
      },
      {
        "title": "get_user_by_id()",
        "line_start": 2125,
        "description": "```python response = supabase.auth.admin.get_user_by_id(1) ```"
      },
      {
        "title": "update_user_by_id()",
        "line_start": 2322,
        "description": "```python response = supabase.auth.admin.update_user_by_id( \"11111111-1111-1111-1111-111111111111\", { \"email\": \"new@email.com\", } ) ```"
      }
    ],
    "Multi-Factor Authentication": [
      {
        "title": "mfa.enroll()",
        "line_start": 1987,
        "description": "```python response = supabase.auth.mfa.enroll( { \"factor_type\": \"totp\", \"friendly_name\": \"your_friendly_name\", } ) ```"
      },
      {
        "title": "mfa.challenge()",
        "line_start": 2007,
        "description": "```python response = supabase.auth.mfa.challenge( {\"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"} ) ```"
      },
      {
        "title": "mfa.verify()",
        "line_start": 2024,
        "description": "```python response = supabase.auth.mfa.verify( { \"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\", \"challenge_id\": \"4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15\", \"code\": \"123456\", } ) ```"
      },
      {
        "title": "mfa.challenge_and_verify()",
        "line_start": 2045,
        "description": "```python response = supabase.auth.mfa.challenge_and_verify( { \"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\", \"code\": \"123456\", } ) ```"
      },
      {
        "title": "mfa.unenroll()",
        "line_start": 2065,
        "description": "```python response = supabase.auth.mfa.unenroll( {\"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"} ) ```"
      },
      {
        "title": "mfa.get_authenticator_assurance_level()",
        "line_start": 2082,
        "description": "```python response = supabase.auth.mfa.get_authenticator_assurance_level() ```"
      },
      {
        "title": "mfa.delete_factor()",
        "line_start": 2402,
        "description": "```python response = supabase.auth.admin.mfa.delete_factor( { \"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\", \"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\" } ) ```"
      }
    ],
    "Admin Functions": [
      {
        "title": "list_users()",
        "line_start": 2140,
        "description": "```python response = supabase.auth.admin.list_users() ```"
      },
      {
        "title": "create_user()",
        "line_start": 2165,
        "description": "```python response = supabase.auth.admin.create_user( { \"email\": \"user@email.com\", \"password\": \"password\", \"user_metadata\": {\"name\": \"Yoda\"}, } ) ```"
      },
      {
        "title": "delete_user()",
        "line_start": 2210,
        "description": "Delete a user. Requires a `service_role` key."
      },
      {
        "title": "invite_user_by_email()",
        "line_start": 2227,
        "description": "Sends an invite link to an email address."
      },
      {
        "title": "generate_link()",
        "line_start": 2242,
        "description": "```python response = supabase.auth.admin.generate_link( { \"type\": \"signup\", \"email\": \"email@example.com\", \"password\": \"secret\", } ) ```"
      }
    ],
    "Edge Functions": [
      {
        "title": "invoke()",
        "line_start": 2422,
        "description": "Invoke a Supabase Function."
      }
    ],
    "Realtime": [
      {
        "title": "on().subscribe()",
        "line_start": 2510,
        "description": "```python channel = supabase.channel(\"room1\")"
      },
      {
        "title": "removeChannel()",
        "line_start": 2664,
        "description": "```python await supabase.remove_channel(myChannel) ```"
      },
      {
        "title": "removeAllChannels()",
        "line_start": 2679,
        "description": "```python await supabase.remove_all_channels() ```"
      },
      {
        "title": "getChannels()",
        "line_start": 2694,
        "description": "```python channels = supabase.get_channels() ```"
      },
      {
        "title": "broadcastMessage()",
        "line_start": 2709,
        "description": "Broadcast a message to all connected clients to a channel."
      }
    ],
    "Storage": [
      {
        "title": "create_bucket()",
        "line_start": 2731,
        "description": "Creates a new Storage bucket"
      },
      {
        "title": "get_bucket()",
        "line_start": 2757,
        "description": "Retrieves the details of an existing Storage bucket."
      },
      {
        "title": "list_buckets()",
        "line_start": 2773,
        "description": "Retrieves the details of all Storage buckets within an existing project."
      },
      {
        "title": "update_bucket()",
        "line_start": 2789,
        "description": "Updates a Storage bucket"
      },
      {
        "title": "delete_bucket()",
        "line_start": 2815,
        "description": "Deletes an existing bucket. A bucket can't be deleted with existing objects inside it. You must first `empty()` the bucket."
      },
      {
        "title": "empty_bucket()",
        "line_start": 2831,
        "description": "Removes all objects inside a single bucket."
      },
      {
        "title": "from_.upload()",
        "line_start": 2847,
        "description": "Uploads a file to an existing bucket."
      },
      {
        "title": "from_.download()",
        "line_start": 2871,
        "description": "Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `get_public_url` instead."
      },
      {
        "title": "from_.list()",
        "line_start": 2908,
        "description": "Lists all the files within a bucket."
      },
      {
        "title": "from_.move()",
        "line_start": 2977,
        "description": "Moves an existing file to a new path in the same bucket."
      },
      {
        "title": "from_.copy()",
        "line_start": 2999,
        "description": "Copies an existing file to a new path in the same bucket."
      },
      {
        "title": "from_.remove()",
        "line_start": 3021,
        "description": "Deletes files within the same bucket"
      },
      {
        "title": "from_.create_signed_url()",
        "line_start": 3040,
        "description": "Creates a signed URL for a file. Use a signed URL to share a file for a fixed amount of time."
      },
      {
        "title": "from_.create_signed_urls()",
        "line_start": 3092,
        "description": "Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time."
      },
      {
        "title": "from_.create_signed_upload_url()",
        "line_start": 3114,
        "description": "Creates a signed upload URL. Signed upload URLs can be used to upload files to the bucket without further authentication. They are valid for 2 hours."
      },
      {
        "title": "from_.upload_to_signed_url()",
        "line_start": 3133,
        "description": "Upload a file with a token generated from `create_signed_upload_url`."
      },
      {
        "title": "from_.get_public_url()",
        "line_start": 3157,
        "description": "A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset. This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset."
      }
    ]
  },
  "sections": [
    {
      "title": "You can initialize a new Supabase client using the `create_client()` method.",
      "description": "The Supabase client is your entrypoint to the rest of the Supabase functionality and is the easiest way to interact with everything we offer within the Supabase ecosystem.",
      "content": "The Supabase client is your entrypoint to the rest of the Supabase functionality\nand is the easiest way to interact with everything we offer within the Supabase ecosystem.\n\n\n## Examples\n\n### create_client()\n\n```python\nimport os\nfrom supabase import create_client, Client\n\nurl: str = os.environ.get(\"SUPABASE_URL\")\nkey: str = os.environ.get(\"SUPABASE_KEY\")\nsupabase: Client = create_client(url, key)\n```\n\n\n### With timeout option\n\n```python\nimport os\nfrom supabase import create_client, Client\nfrom supabase.client import ClientOptions\n\nurl: str = os.environ.get(\"SUPABASE_URL\")\nkey: str = os.environ.get(\"SUPABASE_KEY\")\nsupabase: Client = create_client(\n    url,\n    key,\n    options=ClientOptions(\n        postgrest_client_timeout=10,\n        storage_client_timeout=10,\n        schema=\"public\",\n    )\n)\n```",
      "line_start": 3,
      "line_end": 47,
      "category": "Client Setup",
      "examples": [
        "create_client()",
        "With timeout option"
      ],
      "code_blocks": [
        "import os\nfrom supabase import create_client, Client\n\nurl: str = os.environ.get(\"SUPABASE_URL\")\nkey: str = os.environ.get(\"SUPABASE_KEY\")\nsupabase: Client = create_client(url, key)",
        "import os\nfrom supabase import create_client, Client\nfrom supabase.client import ClientOptions\n\nurl: str = os.environ.get(\"SUPABASE_URL\")\nkey: str = os.environ.get(\"SUPABASE_KEY\")\nsupabase: Client = create_client(\n    url,\n    key,\n    options=ClientOptions(\n        postgrest_client_timeout=10,\n        storage_client_timeout=10,\n        schema=\"public\",\n    )\n)"
      ]
    },
    {
      "title": "Fetch data: select()",
      "description": "```python response = ( supabase.table(\"planets\") .select(\"*\") .execute() ) ```",
      "content": "## Examples\n\n### Getting your data\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .execute()\n)\n```\n\n\n### Selecting specific columns\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .execute()\n)\n```\n\n\n### Query referenced tables\n\n```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments(name)\")\n    .execute()\n)\n```\n\n\n### Query referenced tables through a join table\n\n```python\nresponse = (\n    supabase.table(\"users\")\n    .select(\"name, teams(name)\")\n    .execute()\n)\n```\n\n\n### Query the same referenced table multiple times\n\n```python\nresponse = (\n    supabase.table(\"messages\")\n    .select(\"content,from:sender_id(name),to:receiver_id(name)\")\n    .execute()\n)\n```\n\n\n### Filtering through referenced tables\n\n```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments(*)\")\n    .eq(\"instruments.name\", \"guqin\")\n    .execute()\n)\n```\n\n\n### Querying referenced table with count\n\n```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"*, instruments(count)\")\n    .execute()\n)\n```\n\n\n### Querying with count option\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\", count=\"exact\")\n    .execute()\n)\n```\n\n\n### Querying JSON data\n\n```python\nresponse = (\n    supabase.table(\"users\")\n    .select(\"id, name, address->city\")\n    .execute()\n)\n```\n\n\n### Querying referenced table with inner join\n\n```python\nresponse = (\n    supabase.table(\"instruments\")\n    .select(\"name, orchestral_sections!inner(name)\")\n    .eq(\"orchestral_sections.name\", \"woodwinds\")\n    .execute()\n)\n```\n\n\n### Switching schemas per query\n\n```python\nresponse = (\n    supabase.schema(\"myschema\")\n    .table(\"mytable\")\n    .select(\"*\")\n    .execute()\n)\n```",
      "line_start": 48,
      "line_end": 179,
      "category": "Database Operations",
      "examples": [
        "Getting your data",
        "Selecting specific columns",
        "Query referenced tables",
        "Query referenced tables through a join table",
        "Query the same referenced table multiple times",
        "Filtering through referenced tables",
        "Querying referenced table with count",
        "Querying with count option",
        "Querying JSON data",
        "Querying referenced table with inner join",
        "Switching schemas per query"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .execute()\n)",
        "response = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .execute()\n)",
        "response = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments(name)\")\n    .execute()\n)",
        "response = (\n    supabase.table(\"users\")\n    .select(\"name, teams(name)\")\n    .execute()\n)",
        "response = (\n    supabase.table(\"messages\")\n    .select(\"content,from:sender_id(name),to:receiver_id(name)\")\n    .execute()\n)",
        "response = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments(*)\")\n    .eq(\"instruments.name\", \"guqin\")\n    .execute()\n)",
        "response = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"*, instruments(count)\")\n    .execute()\n)",
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\", count=\"exact\")\n    .execute()\n)",
        "response = (\n    supabase.table(\"users\")\n    .select(\"id, name, address->city\")\n    .execute()\n)",
        "response = (\n    supabase.table(\"instruments\")\n    .select(\"name, orchestral_sections!inner(name)\")\n    .eq(\"orchestral_sections.name\", \"woodwinds\")\n    .execute()\n)",
        "response = (\n    supabase.schema(\"myschema\")\n    .table(\"mytable\")\n    .select(\"*\")\n    .execute()\n)"
      ]
    },
    {
      "title": "Create data: insert()",
      "description": "```python response = ( supabase.table(\"planets\") .insert({\"id\": 1, \"name\": \"Pluto\"}) .execute() ) ```",
      "content": "## Examples\n\n### Create a record\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .insert({\"id\": 1, \"name\": \"Pluto\"})\n    .execute()\n)\n```\n\n\n### Bulk create\n\n```python\ntry:\n    response = (\n        supabase.table(\"characters\")\n        .insert([\n            {\"id\": 1, \"name\": \"Frodo\"},\n            {\"id\": 2, \"name\": \"Sam\"},\n        ])\n        .execute()\n    )\n    return response\nexcept Exception as exception:\n    return exception\n```",
      "line_start": 180,
      "line_end": 216,
      "category": "Database Operations",
      "examples": [
        "Create a record",
        "Bulk create"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .insert({\"id\": 1, \"name\": \"Pluto\"})\n    .execute()\n)",
        "try:\n    response = (\n        supabase.table(\"characters\")\n        .insert([\n            {\"id\": 1, \"name\": \"Frodo\"},\n            {\"id\": 2, \"name\": \"Sam\"},\n        ])\n        .execute()\n    )\n    return response\nexcept Exception as exception:\n    return exception"
      ]
    },
    {
      "title": "Modify data: update()",
      "description": "```python response = ( supabase.table(\"instruments\") .update({\"name\": \"piano\"}) .eq(\"id\", 1) .execute() ) ```",
      "content": "## Examples\n\n### Updating your data\n\n```python\nresponse = (\n    supabase.table(\"instruments\")\n    .update({\"name\": \"piano\"})\n    .eq(\"id\", 1)\n    .execute()\n)\n```\n\n\n### Updating JSON data\n\n```python\nresponse = (\n    supabase.table(\"users\")\n    .update({\"address\": {\"street\": \"Melrose Place\", \"postcode\": 90210}})\n    .eq(\"address->postcode\", 90210)\n    .execute()\n)\n```",
      "line_start": 217,
      "line_end": 248,
      "category": "Database Operations",
      "examples": [
        "Updating your data",
        "Updating JSON data"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"instruments\")\n    .update({\"name\": \"piano\"})\n    .eq(\"id\", 1)\n    .execute()\n)",
        "response = (\n    supabase.table(\"users\")\n    .update({\"address\": {\"street\": \"Melrose Place\", \"postcode\": 90210}})\n    .eq(\"address->postcode\", 90210)\n    .execute()\n)"
      ]
    },
    {
      "title": "Upsert data: upsert()",
      "description": "```python response = ( supabase.table(\"instruments\") .upsert({\"id\": 1, \"name\": \"piano\"}) .execute() ) ```",
      "content": "## Examples\n\n### Upsert your data\n\n```python\nresponse = (\n    supabase.table(\"instruments\")\n    .upsert({\"id\": 1, \"name\": \"piano\"})\n    .execute()\n)\n```\n\n\n### Bulk Upsert your data\n\n```python\nresponse = (\n    supabase.table(\"instruments\")\n    .upsert([{\"id\": 1, \"name\": \"piano\"}, {\"id\": 2, \"name\": \"guitar\"}])\n    .execute()\n)\n```\n\n\n### Upserting into tables with constraints\n\n```python\nresponse = (\n    supabase.table(\"users\")\n    .upsert(\n        {\"id\": 42, \"handle\": \"saoirse\", \"display_name\": \"Saoirse\"},\n        on_conflict=\"handle\",\n    )\n    .execute()\n)\n```",
      "line_start": 249,
      "line_end": 292,
      "category": "Database Operations",
      "examples": [
        "Upsert your data",
        "Bulk Upsert your data",
        "Upserting into tables with constraints"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"instruments\")\n    .upsert({\"id\": 1, \"name\": \"piano\"})\n    .execute()\n)",
        "response = (\n    supabase.table(\"instruments\")\n    .upsert([{\"id\": 1, \"name\": \"piano\"}, {\"id\": 2, \"name\": \"guitar\"}])\n    .execute()\n)",
        "response = (\n    supabase.table(\"users\")\n    .upsert(\n        {\"id\": 42, \"handle\": \"saoirse\", \"display_name\": \"Saoirse\"},\n        on_conflict=\"handle\",\n    )\n    .execute()\n)"
      ]
    },
    {
      "title": "Delete data: delete()",
      "description": "```python response = ( supabase.table(\"countries\") .delete() .eq(\"id\", 1) .execute() ) ```",
      "content": "## Examples\n\n### Delete records\n\n```python\nresponse = (\n    supabase.table(\"countries\")\n    .delete()\n    .eq(\"id\", 1)\n    .execute()\n)\n```\n\n\n### Delete multiple records\n\n```python\nresponse = (\n    supabase.table(\"countries\")\n    .delete()\n    .in_(\"id\", [1, 2, 3])\n    .execute()\n)\n```",
      "line_start": 293,
      "line_end": 324,
      "category": "Database Operations",
      "examples": [
        "Delete records",
        "Delete multiple records"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"countries\")\n    .delete()\n    .eq(\"id\", 1)\n    .execute()\n)",
        "response = (\n    supabase.table(\"countries\")\n    .delete()\n    .in_(\"id\", [1, 2, 3])\n    .execute()\n)"
      ]
    },
    {
      "title": "Postgres functions: rpc()",
      "description": "You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere. Functions are useful when the logic rarely changes\u2014like for password resets and updates.",
      "content": "You can call Postgres functions as _Remote Procedure Calls_, logic in your database that you can execute from anywhere.\nFunctions are useful when the logic rarely changes\u2014like for password resets and updates.\n\n```sql\ncreate or replace function hello_world() returns text as $$\n  select 'Hello world';\n$$ language sql;\n```\n\n\n## Examples\n\n### Call a Postgres function without arguments\n\n```python\nresponse = (\n    supabase.rpc(\"hello_world\")\n    .execute()\n)\n```\n\n\n### Call a Postgres function with arguments\n\n```python\nresponse = (\n    supabase.rpc(\"echo\", { \"say\": \"\ud83d\udc4b\" })\n    .execute()\n)\n```\n\n\n### Bulk processing\n\n```python\nresponse = (\n    supabase.rpc(\"add_one_each\", {\"arr\": [1, 2, 3]})\n    .execute()\n)\n```\n\n\n### Call a Postgres function with filters\n\n```python\nresponse = (\n    supabase.rpc(\"list_stored_planets\")\n    .eq(\"id\", 1)\n    .single()\n    .execute()\n)\n```\n\n\n### Call a read-only Postgres function\n\n```python\nresponse = (\n    supabase.rpc(\"hello_world\", get=True)\n    .execute()\n)\n```",
      "line_start": 325,
      "line_end": 392,
      "category": "Database Operations",
      "examples": [
        "Call a Postgres function without arguments",
        "Call a Postgres function with arguments",
        "Bulk processing",
        "Call a Postgres function with filters",
        "Call a read-only Postgres function"
      ],
      "code_blocks": [
        "create or replace function hello_world() returns text as $$\n  select 'Hello world';\n$$ language sql;",
        "response = (\n    supabase.rpc(\"hello_world\")\n    .execute()\n)",
        "response = (\n    supabase.rpc(\"echo\", { \"say\": \"\ud83d\udc4b\" })\n    .execute()\n)",
        "response = (\n    supabase.rpc(\"add_one_each\", {\"arr\": [1, 2, 3]})\n    .execute()\n)",
        "response = (\n    supabase.rpc(\"list_stored_planets\")\n    .eq(\"id\", 1)\n    .single()\n    .execute()\n)",
        "response = (\n    supabase.rpc(\"hello_world\", get=True)\n    .execute()\n)"
      ]
    },
    {
      "title": "Using Filters",
      "description": "Filters allow you to only return rows that match certain conditions.",
      "content": "Filters allow you to only return rows that match certain conditions.\n\nFilters can be used on `select()`, `update()`, `upsert()`, and `delete()` queries.\n\nIf a Postgres function returns a table response, you can also apply filters.\n\n\n## Examples\n\n### Applying Filters\n\n```python\n# Correct\nresponse = (\n    supabase.table(\"instruments\")\n    .select(\"name, section_id\")\n    .eq(\"name\", \"flute\")\n    .execute()\n)\n\n# Incorrect\nresponse = (\n    supabase.table(\"instruments\")\n    .eq(\"name\", \"flute\")\n    .select(\"name, section_id\")\n    .execute()\n)\n```\n\n\n### Chaining\n\n```python\nresponse = (\n    supabase.table(\"instruments\")\n    .select(\"name, section_id\")\n    .gte(\"octave_range\", 3)\n    .lt(\"octave_range\", 7)\n    .execute()\n)\n```\n\n\n### Conditional chaining\n\n```python\nfilterByName = None\nfilterOctaveLow = 3\nfilterOctaveHigh = 7\n\nquery = supabase.table(\"instruments\").select(\"name, section_id\")\n\nif filterByName:\n    query = query.eq(\"name\", filterByName)\n\nif filterAgeLow:\n    query = query.gte(\"octave_range\", filterOctaveLow)\n\nif filterAgeHigh:\n    query = query.lt(\"octave_range\", filterOctaveHigh)\n\nresponse = query.execute()\n```\n\n\n### Filter by values within JSON column\n\n```python\nresponse = (\n    supabase.table(\"users\")\n    .select(\"*\")\n    .eq(\"address->postcode\", 90210)\n    .execute()\n)\n```\n\n\n### Filter Foreign Tables\n\n```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments!inner(name)\")\n    .eq(\"instruments.name\", \"flute\")\n    .execute()\n)\n```",
      "line_start": 393,
      "line_end": 485,
      "category": "Filters",
      "examples": [
        "Applying Filters",
        "Chaining",
        "Conditional chaining",
        "Filter by values within JSON column",
        "Filter Foreign Tables"
      ],
      "code_blocks": [
        "# Correct\nresponse = (\n    supabase.table(\"instruments\")\n    .select(\"name, section_id\")\n    .eq(\"name\", \"flute\")\n    .execute()\n)\n\n# Incorrect\nresponse = (\n    supabase.table(\"instruments\")\n    .eq(\"name\", \"flute\")\n    .select(\"name, section_id\")\n    .execute()\n)",
        "response = (\n    supabase.table(\"instruments\")\n    .select(\"name, section_id\")\n    .gte(\"octave_range\", 3)\n    .lt(\"octave_range\", 7)\n    .execute()\n)",
        "filterByName = None\nfilterOctaveLow = 3\nfilterOctaveHigh = 7\n\nquery = supabase.table(\"instruments\").select(\"name, section_id\")\n\nif filterByName:\n    query = query.eq(\"name\", filterByName)\n\nif filterAgeLow:\n    query = query.gte(\"octave_range\", filterOctaveLow)\n\nif filterAgeHigh:\n    query = query.lt(\"octave_range\", filterOctaveHigh)\n\nresponse = query.execute()",
        "response = (\n    supabase.table(\"users\")\n    .select(\"*\")\n    .eq(\"address->postcode\", 90210)\n    .execute()\n)",
        "response = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments!inner(name)\")\n    .eq(\"instruments.name\", \"flute\")\n    .execute()\n)"
      ]
    },
    {
      "title": "eq()",
      "description": "Match only rows where `column` is equal to `value`.",
      "content": "Match only rows where `column` is equal to `value`.\n\n\n## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .eq(\"name\", \"Earth\")\n    .execute()\n)\n```",
      "line_start": 486,
      "line_end": 506,
      "category": "Filters",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .eq(\"name\", \"Earth\")\n    .execute()\n)"
      ]
    },
    {
      "title": "neq()",
      "description": "Match only rows where `column` is not equal to `value`.",
      "content": "Match only rows where `column` is not equal to `value`.\n\n\n## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .neq(\"name\", \"Earth\")\n    .execute()\n)\n```",
      "line_start": 507,
      "line_end": 527,
      "category": "Filters",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .neq(\"name\", \"Earth\")\n    .execute()\n)"
      ]
    },
    {
      "title": "gt()",
      "description": "Match only rows where `column` is greather than `value`.",
      "content": "Match only rows where `column` is greather than `value`.\n\n\n## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .gt(\"id\", 2)\n    .execute()\n)\n```",
      "line_start": 528,
      "line_end": 548,
      "category": "Filters",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .gt(\"id\", 2)\n    .execute()\n)"
      ]
    },
    {
      "title": "gte()",
      "description": "Match only rows where `column` is greater than or equal to `value`.",
      "content": "Match only rows where `column` is greater than or equal to `value`.\n\n\n## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .gte(\"id\", 2)\n    .execute()\n)\n```",
      "line_start": 549,
      "line_end": 569,
      "category": "Filters",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .gte(\"id\", 2)\n    .execute()\n)"
      ]
    },
    {
      "title": "lt()",
      "description": "Match only rows where `column` is less than `value`.",
      "content": "Match only rows where `column` is less than `value`.\n\n\n## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .lt(\"id\", 2)\n    .execute()\n)\n```",
      "line_start": 570,
      "line_end": 590,
      "category": "Filters",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .lt(\"id\", 2)\n    .execute()\n)"
      ]
    },
    {
      "title": "lte()",
      "description": "Match only rows where `column` is less than or equal to `value`.",
      "content": "Match only rows where `column` is less than or equal to `value`.\n\n\n## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .lte(\"id\", 2)\n    .execute()\n)\n```",
      "line_start": 591,
      "line_end": 611,
      "category": "Filters",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .lte(\"id\", 2)\n    .execute()\n)"
      ]
    },
    {
      "title": "like()",
      "description": "Match only rows where `column` matches `pattern` case-sensitively.",
      "content": "Match only rows where `column` matches `pattern` case-sensitively.\n\n\n## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .like(\"name\", \"%Ea%\")\n    .execute()\n)\n```",
      "line_start": 612,
      "line_end": 632,
      "category": "Filters",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .like(\"name\", \"%Ea%\")\n    .execute()\n)"
      ]
    },
    {
      "title": "ilike()",
      "description": "Match only rows where `column` matches `pattern` case-insensitively.",
      "content": "Match only rows where `column` matches `pattern` case-insensitively.\n\n\n## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .ilike(\"name\", \"%ea%\")\n    .execute()\n)\n```",
      "line_start": 633,
      "line_end": 653,
      "category": "Filters",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .ilike(\"name\", \"%ea%\")\n    .execute()\n)"
      ]
    },
    {
      "title": "is_()",
      "description": "Match only rows where `column` IS `value`.",
      "content": "Match only rows where `column` IS `value`.\n\n\n## Examples\n\n### Checking for nullness, True or False\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .is_(\"name\", \"null\")\n    .execute()\n)\n```",
      "line_start": 654,
      "line_end": 674,
      "category": "Filters",
      "examples": [
        "Checking for nullness, True or False"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .is_(\"name\", \"null\")\n    .execute()\n)"
      ]
    },
    {
      "title": "in_()",
      "description": "Match only rows where `column` is included in the `values` array.",
      "content": "Match only rows where `column` is included in the `values` array.\n\n\n## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .in_(\"name\", [\"Earth\", \"Mars\"])\n    .execute()\n)\n```",
      "line_start": 675,
      "line_end": 695,
      "category": "Filters",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .in_(\"name\", [\"Earth\", \"Mars\"])\n    .execute()\n)"
      ]
    },
    {
      "title": "contains()",
      "description": "Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.",
      "content": "Only relevant for jsonb, array, and range columns. Match only rows where `column` contains every element appearing in `value`.\n\n\n## Examples\n\n### On array columns\n\n```python\nresponse = (\n    supabase.table(\"issues\")\n    .select(\"*\")\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n    .execute()\n)\n```\n\n\n### On range columns\n\n```python\nresponse = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .contains(\"during\", \"[2000-01-01 13:00, 2000-01-01 13:30)\")\n    .execute()\n)\n```\n\n\n### On `jsonb` columns\n\n```python\nresponse = (\n    supabase.table(\"users\")\n    .select(\"*\")\n    .contains(\"address\", {\"postcode\": 90210})\n    .execute()\n)\n```",
      "line_start": 696,
      "line_end": 740,
      "category": "Filters",
      "examples": [
        "On array columns",
        "On range columns",
        "On `jsonb` columns"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"issues\")\n    .select(\"*\")\n    .contains(\"tags\", [\"is:open\", \"priority:low\"])\n    .execute()\n)",
        "response = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .contains(\"during\", \"[2000-01-01 13:00, 2000-01-01 13:30)\")\n    .execute()\n)",
        "response = (\n    supabase.table(\"users\")\n    .select(\"*\")\n    .contains(\"address\", {\"postcode\": 90210})\n    .execute()\n)"
      ]
    },
    {
      "title": "contained_by()",
      "description": "Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.",
      "content": "Only relevant for jsonb, array, and range columns. Match only rows where every element appearing in `column` is contained by `value`.\n\n\n## Examples\n\n### On array columns\n\n```python\nresponse = (\n    supabase.table(\"classes\")\n    .select(\"name\")\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n    .execute()\n)\n```\n\n\n### On range columns\n\n```python\nresponse = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .contained_by(\"during\", \"[2000-01-01 00:00, 2000-01-01 23:59)\")\n    .execute()\n)\n```\n\n\n### On `jsonb` columns\n\n```python\nresponse = (\n    supabase.table(\"users\")\n    .select(\"name\")\n    .contained_by(\"address\", {})\n    .execute()\n)\n```",
      "line_start": 741,
      "line_end": 785,
      "category": "Filters",
      "examples": [
        "On array columns",
        "On range columns",
        "On `jsonb` columns"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"classes\")\n    .select(\"name\")\n    .contained_by(\"days\", [\"monday\", \"tuesday\", \"wednesday\", \"friday\"])\n    .execute()\n)",
        "response = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .contained_by(\"during\", \"[2000-01-01 00:00, 2000-01-01 23:59)\")\n    .execute()\n)",
        "response = (\n    supabase.table(\"users\")\n    .select(\"name\")\n    .contained_by(\"address\", {})\n    .execute()\n)"
      ]
    },
    {
      "title": "range_gt()",
      "description": "Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.",
      "content": "Only relevant for range columns. Match only rows where every element in `column` is greater than any element in `range`.\n\n\n## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n    .execute()\n)\n```",
      "line_start": 786,
      "line_end": 806,
      "category": "Filters",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .range_gt(\"during\", [\"2000-01-02 08:00\", \"2000-01-02 09:00\"])\n    .execute()\n)"
      ]
    },
    {
      "title": "range_gte()",
      "description": "Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.",
      "content": "Only relevant for range columns. Match only rows where every element in `column` is either contained in `range` or greater than any element in `range`.\n\n\n## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n    .execute()\n)\n```",
      "line_start": 807,
      "line_end": 827,
      "category": "Filters",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .range_gte(\"during\", [\"2000-01-02 08:30\", \"2000-01-02 09:30\"])\n    .execute()\n)"
      ]
    },
    {
      "title": "range_lt()",
      "description": "Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.",
      "content": "Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n\n## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n    .execute()\n)\n```",
      "line_start": 828,
      "line_end": 848,
      "category": "Filters",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .range_lt(\"during\", [\"2000-01-01 15:00\", \"2000-01-01 16:00\"])\n    .execute()\n)"
      ]
    },
    {
      "title": "range_lte()",
      "description": "Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.",
      "content": "Only relevant for range columns. Match only rows where every element in `column` is less than any element in `range`.\n\n\n## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n    .execute()\n)\n```",
      "line_start": 849,
      "line_end": 869,
      "category": "Filters",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .range_lte(\"during\", [\"2000-01-01 14:00\", \"2000-01-01 16:00\"])\n    .execute()\n)"
      ]
    },
    {
      "title": "range_adjacent()",
      "description": "Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.",
      "content": "Only relevant for range columns. Match only rows where `column` is mutually exclusive to `range` and there can be no element between the two ranges.\n\n\n## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n    .execute()\n)\n```",
      "line_start": 870,
      "line_end": 890,
      "category": "Filters",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .range_adjacent(\"during\", [\"2000-01-01 12:00\", \"2000-01-01 13:00\"])\n    .execute()\n)"
      ]
    },
    {
      "title": "overlaps()",
      "description": "Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.",
      "content": "Only relevant for array and range columns. Match only rows where `column` and `value` have an element in common.\n\n\n## Examples\n\n### On array columns\n\n```python\nresponse = (\n    supabase.table(\"issues\")\n    .select(\"title\")\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n    .execute()\n)\n```\n\n\n### On range columns\n\n```python\nresponse = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .overlaps(\"during\", \"[2000-01-01 12:45, 2000-01-01 13:15)\")\n    .execute()\n)\n```",
      "line_start": 891,
      "line_end": 923,
      "category": "Filters",
      "examples": [
        "On array columns",
        "On range columns"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"issues\")\n    .select(\"title\")\n    .overlaps(\"tags\", [\"is:closed\", \"severity:high\"])\n    .execute()\n)",
        "response = (\n    supabase.table(\"reservations\")\n    .select(\"*\")\n    .overlaps(\"during\", \"[2000-01-01 12:45, 2000-01-01 13:15)\")\n    .execute()\n)"
      ]
    },
    {
      "title": "text_search()",
      "description": "Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.",
      "content": "Only relevant for text and tsvector columns. Match only rows where `column` matches the query string in `query`.\n\n\n## Examples\n\n### Text search\n\n```python\nresponse = (\n    supabase.table(\"texts\")\n    .select(\"content\")\n    .text_search(\n        \"content\",\n        \"'eggs' & 'ham'\",\n        options={\"config\": \"english\"},\n    )\n    .execute()\n)\n```\n\n\n### Basic normalization\n\n```python\nresponse = (\n    supabase.table(\"quotes\")\n    .select(\"catchphrase\")\n    .text_search(\n        \"catchphrase\",\n        \"'fat' & 'cat'\",\n        options={\"type\": \"plain\", \"config\": \"english\"},\n    )\n    .execute()\n)\n```\n\n\n### Full normalization\n\n```python\nresponse = (\n    supabase.table(\"quotes\")\n    .select(\"catchphrase\")\n    .text_search(\n        \"catchphrase\",\n        \"'fat' & 'cat'\",\n        options={\"type\": \"phrase\", \"config\": \"english\"},\n    )\n    .execute()\n)\n```\n\n\n### Websearch\n\n```python\nresponse = (\n    supabase.table(\"quotes\")\n    .select(\"catchphrase\")\n    .text_search(\n        \"catchphrase\",\n        \"'fat or cat'\",\n        options={\"type\": \"websearch\", \"config\": \"english\"},\n    )\n    .execute()\n)\n```",
      "line_start": 924,
      "line_end": 996,
      "category": "Filters",
      "examples": [
        "Text search",
        "Basic normalization",
        "Full normalization",
        "Websearch"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"texts\")\n    .select(\"content\")\n    .text_search(\n        \"content\",\n        \"'eggs' & 'ham'\",\n        options={\"config\": \"english\"},\n    )\n    .execute()\n)",
        "response = (\n    supabase.table(\"quotes\")\n    .select(\"catchphrase\")\n    .text_search(\n        \"catchphrase\",\n        \"'fat' & 'cat'\",\n        options={\"type\": \"plain\", \"config\": \"english\"},\n    )\n    .execute()\n)",
        "response = (\n    supabase.table(\"quotes\")\n    .select(\"catchphrase\")\n    .text_search(\n        \"catchphrase\",\n        \"'fat' & 'cat'\",\n        options={\"type\": \"phrase\", \"config\": \"english\"},\n    )\n    .execute()\n)",
        "response = (\n    supabase.table(\"quotes\")\n    .select(\"catchphrase\")\n    .text_search(\n        \"catchphrase\",\n        \"'fat or cat'\",\n        options={\"type\": \"websearch\", \"config\": \"english\"},\n    )\n    .execute()\n)"
      ]
    },
    {
      "title": "match()",
      "description": "Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.",
      "content": "Match only rows where each column in `query` keys is equal to its associated value. Shorthand for multiple `.eq()`s.\n\n\n## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .match({\"id\": 2, \"name\": \"Earth\"})\n    .execute()\n)\n```",
      "line_start": 997,
      "line_end": 1017,
      "category": "Filters",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .match({\"id\": 2, \"name\": \"Earth\"})\n    .execute()\n)"
      ]
    },
    {
      "title": "not_()",
      "description": "Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.",
      "content": "Match only rows which doesn't satisfy the filter. `not_` expects you to use the raw PostgREST syntax for the filter values.\n\n\n## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .not_.is_(\"name\", \"null\")\n    .execute()\n)\n```",
      "line_start": 1018,
      "line_end": 1038,
      "category": "Filters",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .not_.is_(\"name\", \"null\")\n    .execute()\n)"
      ]
    },
    {
      "title": "or_()",
      "description": "```python response = ( supabase.table(\"planets\") .select(\"name\") .or_(\"id.eq.2,name.eq.Mars\") .execute() ) ```",
      "content": "## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .or_(\"id.eq.2,name.eq.Mars\")\n    .execute()\n)\n```\n\n\n### Use `or` with `and`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .or_(\"id.gt.3,and(id.eq.1,name.eq.Mercury)\")\n    .execute()\n)\n```\n\n\n### Use `or` on referenced tables\n\n```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments!inner(name)\")\n    .or_(\"book_id.eq.1,name.eq.guqin\", reference_table=\"instruments\")\n    .execute()\n)\n```",
      "line_start": 1039,
      "line_end": 1082,
      "category": "Filters",
      "examples": [
        "With `select()`",
        "Use `or` with `and`",
        "Use `or` on referenced tables"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .or_(\"id.eq.2,name.eq.Mars\")\n    .execute()\n)",
        "response = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .or_(\"id.gt.3,and(id.eq.1,name.eq.Mercury)\")\n    .execute()\n)",
        "response = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments!inner(name)\")\n    .or_(\"book_id.eq.1,name.eq.guqin\", reference_table=\"instruments\")\n    .execute()\n)"
      ]
    },
    {
      "title": "filter()",
      "description": "```python response = ( supabase.table(\"planets\") .select(\"*\") .filter(\"name\", \"in\", '(\"Mars\",\"Tatooine\")') .execute() ) ```",
      "content": "## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .filter(\"name\", \"in\", '(\"Mars\",\"Tatooine\")')\n    .execute()\n)\n```\n\n\n### On a foreign table\n\n```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments!inner(name)\")\n    .filter(\"instruments.name\", \"eq\", \"flute\")\n    .execute()\n)\n```",
      "line_start": 1083,
      "line_end": 1114,
      "category": "Filters",
      "examples": [
        "With `select()`",
        "On a foreign table"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .filter(\"name\", \"in\", '(\"Mars\",\"Tatooine\")')\n    .execute()\n)",
        "response = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments!inner(name)\")\n    .filter(\"instruments.name\", \"eq\", \"flute\")\n    .execute()\n)"
      ]
    },
    {
      "title": "Using Modifiers",
      "description": "Filters work on the row level\u2014they allow you to return rows that only match certain conditions without changing the shape of the rows. Modifiers are everything that don't fit that definition\u2014allowing you to change the format of the response (e.g., returning a CSV string).",
      "content": "Filters work on the row level\u2014they allow you to return rows that\nonly match certain conditions without changing the shape of the rows.\nModifiers are everything that don't fit that definition\u2014allowing you to\nchange the format of the response (e.g., returning a CSV string).\n\nModifiers must be specified after filters. Some modifiers only apply for\nqueries that return rows (e.g., `select()` or `rpc()` on a function that\nreturns a table response).\n\n\n## Examples",
      "line_start": 1115,
      "line_end": 1132,
      "category": "Modifiers",
      "examples": [],
      "code_blocks": []
    },
    {
      "title": "order()",
      "description": "Order the query result by `column`.",
      "content": "Order the query result by `column`.\n\n## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .order(\"name\", desc=True)\n    .execute()\n)\n```\n\n\n### On a foreign table\n\n```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments(name)\")\n    .order(\"name\", desc=True, foreign_table=\"instruments\")\n    .execute()\n)\n```\n\n\n### Order parent table by a referenced table\n\n```python\nresponse = (\n    supabase.table(\"instruments\")\n    .select(\"name, section:orchestral_sections(name)\")\n    .order(\"section(name)\", desc=False)\n)\n```",
      "line_start": 1133,
      "line_end": 1175,
      "category": "Modifiers",
      "examples": [
        "With `select()`",
        "On a foreign table",
        "Order parent table by a referenced table"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .order(\"name\", desc=True)\n    .execute()\n)",
        "response = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments(name)\")\n    .order(\"name\", desc=True, foreign_table=\"instruments\")\n    .execute()\n)",
        "response = (\n    supabase.table(\"instruments\")\n    .select(\"name, section:orchestral_sections(name)\")\n    .order(\"section(name)\", desc=False)\n)"
      ]
    },
    {
      "title": "limit()",
      "description": "```python response = ( supabase.table(\"planets\") .select(\"name\") .limit(1) .execute() ) ```",
      "content": "## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .limit(1)\n    .execute()\n)\n```\n\n\n### On a foreign table\n\n```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments(name)\")\n    .limit(1, foreign_table=\"instruments\")\n    .execute()\n)\n```",
      "line_start": 1176,
      "line_end": 1207,
      "category": "Modifiers",
      "examples": [
        "With `select()`",
        "On a foreign table"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .limit(1)\n    .execute()\n)",
        "response = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments(name)\")\n    .limit(1, foreign_table=\"instruments\")\n    .execute()\n)"
      ]
    },
    {
      "title": "range()",
      "description": "```python response = ( supabase.table(\"planets\") .select(\"name\") .range(0, 1) .execute() ) ```",
      "content": "## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .range(0, 1)\n    .execute()\n)\n```\n\n\n### On a foreign table\n\n```python\nresponse = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments(name)\")\n    .range(0, 1, foreign_table=\"instruments\")\n    .execute()\n)\n```",
      "line_start": 1208,
      "line_end": 1239,
      "category": "Modifiers",
      "examples": [
        "With `select()`",
        "On a foreign table"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .range(0, 1)\n    .execute()\n)",
        "response = (\n    supabase.table(\"orchestral_sections\")\n    .select(\"name, instruments(name)\")\n    .range(0, 1, foreign_table=\"instruments\")\n    .execute()\n)"
      ]
    },
    {
      "title": "single()",
      "description": "```python response = ( supabase.table(\"planets\") .select(\"name\") .limit(1) .single() .execute() ) ```",
      "content": "## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .limit(1)\n    .single()\n    .execute()\n)\n```",
      "line_start": 1240,
      "line_end": 1260,
      "category": "Modifiers",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"name\")\n    .limit(1)\n    .single()\n    .execute()\n)"
      ]
    },
    {
      "title": "maybe_single()",
      "description": "```python response = ( supabase.table(\"planets\") .select(\"*\") .eq(\"name\", \"Earth\") .maybe_single() .execute() ) ```",
      "content": "## Examples\n\n### With `select()`\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .eq(\"name\", \"Earth\")\n    .maybe_single()\n    .execute()\n)\n```",
      "line_start": 1261,
      "line_end": 1281,
      "category": "Modifiers",
      "examples": [
        "With `select()`"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .eq(\"name\", \"Earth\")\n    .maybe_single()\n    .execute()\n)"
      ]
    },
    {
      "title": "csv()",
      "description": "```python response = ( supabase.table(\"planets\") .select(\"*\") .csv() .execute() ) ```",
      "content": "## Examples\n\n### Return data as CSV\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .csv()\n    .execute()\n)\n```",
      "line_start": 1282,
      "line_end": 1301,
      "category": "Modifiers",
      "examples": [
        "Return data as CSV"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .csv()\n    .execute()\n)"
      ]
    },
    {
      "title": "Using Explain",
      "description": "For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query using the `explain()` method. This works on any query, even for `rpc()` or writes.",
      "content": "For debugging slow queries, you can get the [Postgres `EXPLAIN` execution plan](https://www.postgresql.org/docs/current/sql-explain.html) of a query\nusing the `explain()` method. This works on any query, even for `rpc()` or writes.\n\nExplain is not enabled by default as it can reveal sensitive information about your database.\nIt's best to only enable this for testing environments but if you wish to enable it for production you can provide additional protection by using a `pre-request` function.\n\nFollow the [Performance Debugging Guide](/docs/guides/database/debugging-performance) to enable the functionality on your project.\n\n\n## Examples\n\n### Get the execution plan\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .explain()\n    .execute()\n)\n```\n\n\n### Get the execution plan with analyze and verbose\n\n```python\nresponse = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .explain(analyze=True, verbose=True)\n    .execute()\n)\n```",
      "line_start": 1302,
      "line_end": 1340,
      "category": "Modifiers",
      "examples": [
        "Get the execution plan",
        "Get the execution plan with analyze and verbose"
      ],
      "code_blocks": [
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .explain()\n    .execute()\n)",
        "response = (\n    supabase.table(\"planets\")\n    .select(\"*\")\n    .explain(analyze=True, verbose=True)\n    .execute()\n)"
      ]
    },
    {
      "title": "Overview",
      "description": "",
      "content": "## Examples",
      "line_start": 1341,
      "line_end": 1350,
      "category": "Utilities",
      "examples": [],
      "code_blocks": []
    },
    {
      "title": "sign_up()",
      "description": "```python response = supabase.auth.sign_up( { \"email\": \"email@example.com\", \"password\": \"password\", } ) ```",
      "content": "## Examples\n\n### Sign up with an email and password\n\n```python\nresponse = supabase.auth.sign_up(\n    {\n        \"email\": \"email@example.com\",\n        \"password\": \"password\",\n    }\n)\n```\n\n\n### Sign up with a phone number and password (SMS)\n\n```python\nresponse = supabase.auth.sign_up(\n    {\n        \"phone\": \"123456789\",\n        \"password\": \"password\",\n    }\n)\n```\n\n\n### Sign up with a phone number and password (whatsapp)\n\n```python\nresponse = supabase.auth.sign_up(\n    {\n        \"phone\": \"123456789\",\n        \"password\": \"password\",\n        \"options\": {\"channel\": \"whatsapp\"},\n    }\n)\n```\n\n\n### Sign up with additional user metadata\n\n```python\nresponse = supabase.auth.sign_up(\n    {\n        \"email\": \"email@example.com\",\n        \"password\": \"password\",\n        \"options\": {\"data\": {\"first_name\": \"John\", \"age\": 27}},\n    }\n)\n```\n\n\n### Sign up with a redirect URL\n\n```python\nresponse = supabase.auth.sign_up(\n    {\n        \"email\": \"hello1@example.com\",\n        \"password\": \"password\",\n        \"options\": {\n            \"email_redirect_to\": \"https://example.com/welcome\",\n        },\n    }\n)\n```",
      "line_start": 1351,
      "line_end": 1423,
      "category": "Authentication",
      "examples": [
        "Sign up with an email and password",
        "Sign up with a phone number and password (SMS)",
        "Sign up with a phone number and password (whatsapp)",
        "Sign up with additional user metadata",
        "Sign up with a redirect URL"
      ],
      "code_blocks": [
        "response = supabase.auth.sign_up(\n    {\n        \"email\": \"email@example.com\",\n        \"password\": \"password\",\n    }\n)",
        "response = supabase.auth.sign_up(\n    {\n        \"phone\": \"123456789\",\n        \"password\": \"password\",\n    }\n)",
        "response = supabase.auth.sign_up(\n    {\n        \"phone\": \"123456789\",\n        \"password\": \"password\",\n        \"options\": {\"channel\": \"whatsapp\"},\n    }\n)",
        "response = supabase.auth.sign_up(\n    {\n        \"email\": \"email@example.com\",\n        \"password\": \"password\",\n        \"options\": {\"data\": {\"first_name\": \"John\", \"age\": 27}},\n    }\n)",
        "response = supabase.auth.sign_up(\n    {\n        \"email\": \"hello1@example.com\",\n        \"password\": \"password\",\n        \"options\": {\n            \"email_redirect_to\": \"https://example.com/welcome\",\n        },\n    }\n)"
      ]
    },
    {
      "title": "sign_in_anonymously()",
      "description": "```python response = supabase.auth.sign_in_anonymously( {\"options\": {\"captcha_token\": \"\"}} ) ```",
      "content": "## Examples\n\n### Create an anonymous user\n\n```python\nresponse = supabase.auth.sign_in_anonymously(\n    {\"options\": {\"captcha_token\": \"\"}}\n)\n```\n\n\n### Create an anonymous user with custom user metadata\n\n```python\nresponse = supabase.auth.sign_in_anonymously(\n    {\"options\": {\"data\": {}}}\n)\n```",
      "line_start": 1424,
      "line_end": 1449,
      "category": "Authentication",
      "examples": [
        "Create an anonymous user",
        "Create an anonymous user with custom user metadata"
      ],
      "code_blocks": [
        "response = supabase.auth.sign_in_anonymously(\n    {\"options\": {\"captcha_token\": \"\"}}\n)",
        "response = supabase.auth.sign_in_anonymously(\n    {\"options\": {\"data\": {}}}\n)"
      ]
    },
    {
      "title": "sign_in_with_password",
      "description": "```python response = supabase.auth.sign_in_with_password( { \"email\": \"email@example.com\", \"password\": \"example-password\", } ) ```",
      "content": "## Examples\n\n### Sign in with email and password\n\n```python\nresponse = supabase.auth.sign_in_with_password(\n    {\n        \"email\": \"email@example.com\",\n        \"password\": \"example-password\",\n    }\n)\n```\n\n\n### Sign in with phone and password\n\n```python\nresponse = supabase.auth.sign_in_with_password(\n    {\n        \"phone\": \"+13334445555\",\n        \"password\": \"some-password\",\n    }\n)\n```",
      "line_start": 1450,
      "line_end": 1481,
      "category": "Authentication",
      "examples": [
        "Sign in with email and password",
        "Sign in with phone and password"
      ],
      "code_blocks": [
        "response = supabase.auth.sign_in_with_password(\n    {\n        \"email\": \"email@example.com\",\n        \"password\": \"example-password\",\n    }\n)",
        "response = supabase.auth.sign_in_with_password(\n    {\n        \"phone\": \"+13334445555\",\n        \"password\": \"some-password\",\n    }\n)"
      ]
    },
    {
      "title": "sign_in_with_id_token",
      "description": "```python response = supabase.auth.sign_in_with_id_token( { \"provider\": \"google\", \"token\": \"your-id-token\", } ) ```",
      "content": "## Examples\n\n### Sign In using ID Token\n\n```python\nresponse = supabase.auth.sign_in_with_id_token(\n    {\n        \"provider\": \"google\",\n        \"token\": \"your-id-token\",\n    }\n)\n```",
      "line_start": 1482,
      "line_end": 1501,
      "category": "Authentication",
      "examples": [
        "Sign In using ID Token"
      ],
      "code_blocks": [
        "response = supabase.auth.sign_in_with_id_token(\n    {\n        \"provider\": \"google\",\n        \"token\": \"your-id-token\",\n    }\n)"
      ]
    },
    {
      "title": "sign_in_with_otp",
      "description": "```python response = supabase.auth.sign_in_with_otp( { \"email\": \"email@example.com\", \"options\": { \"email_redirect_to\": \"https://example.com/welcome\", }, } ) ```",
      "content": "## Examples\n\n### Sign in with email\n\n```python\nresponse = supabase.auth.sign_in_with_otp(\n    {\n        \"email\": \"email@example.com\",\n        \"options\": {\n            \"email_redirect_to\": \"https://example.com/welcome\",\n        },\n    }\n)\n```\n\n\n### Sign in with SMS OTP\n\n```python\nresponse = supabase.auth.sign_in_with_otp(\n    {\"phone\": \"+13334445555\"}\n)\n```\n\n\n### Sign in with WhatsApp OTP\n\n```python\nresponse = supabase.auth.sign_in_with_otp(\n    {\n        \"phone\": \"+13334445555\",\n        \"options\": {\n            \"channel\": \"whatsapp\",\n        },\n    }\n)\n```",
      "line_start": 1502,
      "line_end": 1546,
      "category": "Authentication",
      "examples": [
        "Sign in with email",
        "Sign in with SMS OTP",
        "Sign in with WhatsApp OTP"
      ],
      "code_blocks": [
        "response = supabase.auth.sign_in_with_otp(\n    {\n        \"email\": \"email@example.com\",\n        \"options\": {\n            \"email_redirect_to\": \"https://example.com/welcome\",\n        },\n    }\n)",
        "response = supabase.auth.sign_in_with_otp(\n    {\"phone\": \"+13334445555\"}\n)",
        "response = supabase.auth.sign_in_with_otp(\n    {\n        \"phone\": \"+13334445555\",\n        \"options\": {\n            \"channel\": \"whatsapp\",\n        },\n    }\n)"
      ]
    },
    {
      "title": "sign_in_with_oauth",
      "description": "```python response = supabase.auth.sign_in_with_oauth( {\"provider\": \"github\"} ) ```",
      "content": "## Examples\n\n### Sign in using a third-party provider\n\n```python\nresponse = supabase.auth.sign_in_with_oauth(\n    {\"provider\": \"github\"}\n)\n```\n\n\n### Sign in using a third-party provider with redirect\n\n```python\nresponse = supabase.auth.sign_in_with_oauth(\n    {\n        \"provider\": \"github\",\n        \"options\": {\n            \"redirect_to\": \"https://example.com/welcome\",\n        }\n    }\n)\n```\n\n\n### Sign in with scopes\n\n```python\nresponse = supabase.auth.sign_in_with_oauth(\n    {\n        \"provider\": \"github\",\n        \"options\": {\n            \"scopes\": \"repo gist notifications\",\n        }\n    }\n)\n```",
      "line_start": 1547,
      "line_end": 1591,
      "category": "Authentication",
      "examples": [
        "Sign in using a third-party provider",
        "Sign in using a third-party provider with redirect",
        "Sign in with scopes"
      ],
      "code_blocks": [
        "response = supabase.auth.sign_in_with_oauth(\n    {\"provider\": \"github\"}\n)",
        "response = supabase.auth.sign_in_with_oauth(\n    {\n        \"provider\": \"github\",\n        \"options\": {\n            \"redirect_to\": \"https://example.com/welcome\",\n        }\n    }\n)",
        "response = supabase.auth.sign_in_with_oauth(\n    {\n        \"provider\": \"github\",\n        \"options\": {\n            \"scopes\": \"repo gist notifications\",\n        }\n    }\n)"
      ]
    },
    {
      "title": "sign_in_with_sso()",
      "description": "```python response = supabase.auth.sign_in_with_sso( {\"domain\": \"company.com\"} ) ```",
      "content": "## Examples\n\n### Sign in with email domain\n\n```python\nresponse = supabase.auth.sign_in_with_sso(\n    {\"domain\": \"company.com\"}\n)\n```\n\n\n### Sign in with provider UUID\n\n```python\nresponse = supabase.auth.sign_in_with_sso(\n    {\"provider_id\": \"21648a9d-8d5a-4555-a9d1-d6375dc14e92\"}\n)\n```",
      "line_start": 1592,
      "line_end": 1617,
      "category": "Authentication",
      "examples": [
        "Sign in with email domain",
        "Sign in with provider UUID"
      ],
      "code_blocks": [
        "response = supabase.auth.sign_in_with_sso(\n    {\"domain\": \"company.com\"}\n)",
        "response = supabase.auth.sign_in_with_sso(\n    {\"provider_id\": \"21648a9d-8d5a-4555-a9d1-d6375dc14e92\"}\n)"
      ]
    },
    {
      "title": "sign_out()",
      "description": "```python response = supabase.auth.sign_out() ```",
      "content": "## Examples\n\n### Sign out\n\n```python\nresponse = supabase.auth.sign_out()\n```",
      "line_start": 1618,
      "line_end": 1632,
      "category": "Authentication",
      "examples": [
        "Sign out"
      ],
      "code_blocks": [
        "response = supabase.auth.sign_out()"
      ]
    },
    {
      "title": "reset_password_for_email()",
      "description": "```python supabase.auth.reset_password_for_email( email, { \"redirect_to\": \"https://example.com/update-password\", } ) ```",
      "content": "## Examples\n\n### Reset password\n\n```python\nsupabase.auth.reset_password_for_email(\n    email,\n    {\n        \"redirect_to\": \"https://example.com/update-password\",\n    }\n)\n```",
      "line_start": 1633,
      "line_end": 1652,
      "category": "Authentication",
      "examples": [
        "Reset password"
      ],
      "code_blocks": [
        "supabase.auth.reset_password_for_email(\n    email,\n    {\n        \"redirect_to\": \"https://example.com/update-password\",\n    }\n)"
      ]
    },
    {
      "title": "verify_otp",
      "description": "```python response = supabase.auth.verify_otp( { \"email\": \"email@example.com\", \"token\": \"123456\", \"type\": \"email\", } ) ```",
      "content": "## Examples\n\n### Verify Signup One-Time Password (OTP)\n\n```python\nresponse = supabase.auth.verify_otp(\n    {\n        \"email\": \"email@example.com\",\n        \"token\": \"123456\",\n        \"type\": \"email\",\n    }\n)\n```\n\n\n### Verify SMS One-Time Password (OTP)\n\n```python\nresponse = supabase.auth.verify_otp(\n    {\n        \"phone\": \"+13334445555\",\n        \"token\": \"123456\",\n        \"type\": \"sms\",\n    }\n)\n```\n\n\n### Verify Email Auth (Token Hash)\n\n```python\nresponse = supabase.auth.verify_otp(\n    {\n        \"email\": \"email@example.com\",\n        \"token_hash\": \"<token-hash>\",\n        \"type\": \"email\",\n    }\n)\n```",
      "line_start": 1653,
      "line_end": 1699,
      "category": "Authentication",
      "examples": [
        "Verify Signup One-Time Password (OTP)",
        "Verify SMS One-Time Password (OTP)",
        "Verify Email Auth (Token Hash)"
      ],
      "code_blocks": [
        "response = supabase.auth.verify_otp(\n    {\n        \"email\": \"email@example.com\",\n        \"token\": \"123456\",\n        \"type\": \"email\",\n    }\n)",
        "response = supabase.auth.verify_otp(\n    {\n        \"phone\": \"+13334445555\",\n        \"token\": \"123456\",\n        \"type\": \"sms\",\n    }\n)",
        "response = supabase.auth.verify_otp(\n    {\n        \"email\": \"email@example.com\",\n        \"token_hash\": \"<token-hash>\",\n        \"type\": \"email\",\n    }\n)"
      ]
    },
    {
      "title": "get_session",
      "description": "```python response = supabase.auth.get_session() ```",
      "content": "## Examples\n\n### Get the session data\n\n```python\nresponse = supabase.auth.get_session()\n```",
      "line_start": 1700,
      "line_end": 1714,
      "category": "Authentication",
      "examples": [
        "Get the session data"
      ],
      "code_blocks": [
        "response = supabase.auth.get_session()"
      ]
    },
    {
      "title": "refresh_session()",
      "description": "Returns a new session, regardless of expiry status. Takes in an optional refresh token. If not passed in, then refresh_session() will attempt to retrieve it from get_session(). If the current session's refresh token is invalid, an error will be thrown.",
      "content": "Returns a new session, regardless of expiry status.\nTakes in an optional refresh token. If not passed in, then refresh_session() will attempt to retrieve it from get_session().\nIf the current session's refresh token is invalid, an error will be thrown.\n\n\n## Examples\n\n### Refresh session using the current session\n\n```\nresponse = supabase.auth.refresh_session()\n```",
      "line_start": 1715,
      "line_end": 1732,
      "category": "Authentication",
      "examples": [
        "Refresh session using the current session"
      ],
      "code_blocks": [
        "response = supabase.auth.refresh_session()"
      ]
    },
    {
      "title": "get_user",
      "description": "``` response = supabase.auth.get_user() ```",
      "content": "## Examples\n\n### Get the logged in user with the current existing session\n\n```\nresponse = supabase.auth.get_user()\n```\n\n\n### Get the logged in user with a custom access token jwt\n\n```\nresponse = supabase.auth.get_user(jwt)\n```",
      "line_start": 1733,
      "line_end": 1754,
      "category": "Authentication",
      "examples": [
        "Get the logged in user with the current existing session",
        "Get the logged in user with a custom access token jwt"
      ],
      "code_blocks": [
        "response = supabase.auth.get_user()",
        "response = supabase.auth.get_user(jwt)"
      ]
    },
    {
      "title": "update_user()",
      "description": "```python response = supabase.auth.update_user( {\"email\": \"new@email.com\"} ) ```",
      "content": "## Examples\n\n### Update the email for an authenticated user\n\n```python\nresponse = supabase.auth.update_user(\n    {\"email\": \"new@email.com\"}\n)\n```\n\n\n### Update the phone number for an authenticated user\n\n```python\nresponse = supabase.auth.update_user(\n    {\"phone\": \"123456789\"}\n)\n```\n\n\n### Update the password for an authenticated user\n\n```python\nresponse = supabase.auth.update_user(\n    {\"password\": \"new password\"}\n)\n```\n\n\n### Update the user's metadata\n\n```python\nresponse = supabase.auth.update_user(\n    {\n        \"data\": {\"hello\": \"world\"},\n    }\n)\n```\n\n\n### Update the user's password with a nonce\n\n```python\nresponse = supabase.auth.update_user(\n    {\n        \"password\": \"new password\",\n        \"nonce\": \"123456\",\n    }\n)\n```",
      "line_start": 1755,
      "line_end": 1812,
      "category": "Authentication",
      "examples": [
        "Update the email for an authenticated user",
        "Update the phone number for an authenticated user",
        "Update the password for an authenticated user",
        "Update the user's metadata",
        "Update the user's password with a nonce"
      ],
      "code_blocks": [
        "response = supabase.auth.update_user(\n    {\"email\": \"new@email.com\"}\n)",
        "response = supabase.auth.update_user(\n    {\"phone\": \"123456789\"}\n)",
        "response = supabase.auth.update_user(\n    {\"password\": \"new password\"}\n)",
        "response = supabase.auth.update_user(\n    {\n        \"data\": {\"hello\": \"world\"},\n    }\n)",
        "response = supabase.auth.update_user(\n    {\n        \"password\": \"new password\",\n        \"nonce\": \"123456\",\n    }\n)"
      ]
    },
    {
      "title": "get_user_identities()",
      "description": "```python response = supabase.auth.get_user_identities() ```",
      "content": "## Examples\n\n### Returns a list of identities linked to the user\n\n```python\nresponse = supabase.auth.get_user_identities()\n```",
      "line_start": 1813,
      "line_end": 1827,
      "category": "Authentication",
      "examples": [
        "Returns a list of identities linked to the user"
      ],
      "code_blocks": [
        "response = supabase.auth.get_user_identities()"
      ]
    },
    {
      "title": "link_identity()",
      "description": "```python response = supabase.auth.link_identity( {provider: \"github\"} ) ```",
      "content": "## Examples\n\n### Link an identity to a user\n\n```python\nresponse = supabase.auth.link_identity(\n    {provider: \"github\"}\n)\n```",
      "line_start": 1828,
      "line_end": 1844,
      "category": "Authentication",
      "examples": [
        "Link an identity to a user"
      ],
      "code_blocks": [
        "response = supabase.auth.link_identity(\n    {provider: \"github\"}\n)"
      ]
    },
    {
      "title": "unlink_identity()",
      "description": "```python",
      "content": "## Examples\n\n### Unlink an identity\n\n```python\n# retrieve all identites linked to a user\nresponse = supabase.auth.get_user_identities()\n\n# find the google identity\ngoogle_identity = list(\n    filter(lambda identity: identity.provider == \"google\", res.identities)\n).pop()\n\n# unlink the google identity\nresponse = supabase.auth.unlink_identity(google_identity)\n```",
      "line_start": 1845,
      "line_end": 1868,
      "category": "Authentication",
      "examples": [
        "Unlink an identity"
      ],
      "code_blocks": [
        "# retrieve all identites linked to a user\nresponse = supabase.auth.get_user_identities()\n\n# find the google identity\ngoogle_identity = list(\n    filter(lambda identity: identity.provider == \"google\", res.identities)\n).pop()\n\n# unlink the google identity\nresponse = supabase.auth.unlink_identity(google_identity)"
      ]
    },
    {
      "title": "reauthenticate()",
      "description": "```python response = supabase.auth.reauthenticate() ```",
      "content": "## Examples\n\n### Send reauthentication nonce\n\n```python\nresponse = supabase.auth.reauthenticate()\n```",
      "line_start": 1869,
      "line_end": 1883,
      "category": "Authentication",
      "examples": [
        "Send reauthentication nonce"
      ],
      "code_blocks": [
        "response = supabase.auth.reauthenticate()"
      ]
    },
    {
      "title": "resend()",
      "description": "```python response = supabase.auth.resend( { \"type\": \"signup\", \"email\": \"email@example.com\", \"options\": { \"email_redirect_to\": \"https://example.com/welcome\", }, } ) ```",
      "content": "## Examples\n\n### Resend an email signup confirmation\n\n```python\nresponse = supabase.auth.resend(\n    {\n        \"type\": \"signup\",\n        \"email\": \"email@example.com\",\n        \"options\": {\n            \"email_redirect_to\": \"https://example.com/welcome\",\n        },\n    }\n)\n```\n\n\n### Resend a phone signup confirmation\n\n```python\nresponse = supabase.auth.resend(\n    {\n        \"type\": \"sms\",\n        \"phone\": \"1234567890\",\n    }\n)\n```\n\n\n### Resend email change email\n\n```python\nresponse = supabase.auth.resend(\n    {\n        \"type\": \"email_change\",\n        \"email\": \"email@example.com\",\n    }\n)\n```\n\n\n### Resend phone change OTP\n\n```python\nresponse = supabase.auth.resend(\n    {\n        \"type\": \"phone_change\",\n        \"phone\": \"1234567890\",\n    }\n)\n```",
      "line_start": 1884,
      "line_end": 1942,
      "category": "Authentication",
      "examples": [
        "Resend an email signup confirmation",
        "Resend a phone signup confirmation",
        "Resend email change email",
        "Resend phone change OTP"
      ],
      "code_blocks": [
        "response = supabase.auth.resend(\n    {\n        \"type\": \"signup\",\n        \"email\": \"email@example.com\",\n        \"options\": {\n            \"email_redirect_to\": \"https://example.com/welcome\",\n        },\n    }\n)",
        "response = supabase.auth.resend(\n    {\n        \"type\": \"sms\",\n        \"phone\": \"1234567890\",\n    }\n)",
        "response = supabase.auth.resend(\n    {\n        \"type\": \"email_change\",\n        \"email\": \"email@example.com\",\n    }\n)",
        "response = supabase.auth.resend(\n    {\n        \"type\": \"phone_change\",\n        \"phone\": \"1234567890\",\n    }\n)"
      ]
    },
    {
      "title": "set_session()",
      "description": "Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session. If the refresh token or access token in the current session is invalid, an error will be thrown.",
      "content": "Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\nIf the refresh token or access token in the current session is invalid, an error will be thrown.\n\n\n## Examples\n\n### Refresh the session\n\n```python\nresponse = supabase.auth.set_session(access_token, refresh_token)\n```",
      "line_start": 1943,
      "line_end": 1959,
      "category": "Authentication",
      "examples": [
        "Refresh the session"
      ],
      "code_blocks": [
        "response = supabase.auth.set_session(access_token, refresh_token)"
      ]
    },
    {
      "title": "exchange_code_for_session()",
      "description": "```python response = supabase.auth.exchange_code_for_session( {\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"} ) ```",
      "content": "## Examples\n\n### Exchange Auth Code\n\n```python\nresponse = supabase.auth.exchange_code_for_session(\n    {\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"}\n)\n```",
      "line_start": 1960,
      "line_end": 1976,
      "category": "Authentication",
      "examples": [
        "Exchange Auth Code"
      ],
      "code_blocks": [
        "response = supabase.auth.exchange_code_for_session(\n    {\"auth_code\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"}\n)"
      ]
    },
    {
      "title": "Overview",
      "description": "",
      "content": "## Examples",
      "line_start": 1977,
      "line_end": 1986,
      "category": "Utilities",
      "examples": [],
      "code_blocks": []
    },
    {
      "title": "mfa.enroll()",
      "description": "```python response = supabase.auth.mfa.enroll( { \"factor_type\": \"totp\", \"friendly_name\": \"your_friendly_name\", } ) ```",
      "content": "## Examples\n\n### Enroll a time-based, one-time password (TOTP) factor\n\n```python\nresponse = supabase.auth.mfa.enroll(\n    {\n        \"factor_type\": \"totp\",\n        \"friendly_name\": \"your_friendly_name\",\n    }\n)\n```",
      "line_start": 1987,
      "line_end": 2006,
      "category": "Multi-Factor Authentication",
      "examples": [
        "Enroll a time-based, one-time password (TOTP) factor"
      ],
      "code_blocks": [
        "response = supabase.auth.mfa.enroll(\n    {\n        \"factor_type\": \"totp\",\n        \"friendly_name\": \"your_friendly_name\",\n    }\n)"
      ]
    },
    {
      "title": "mfa.challenge()",
      "description": "```python response = supabase.auth.mfa.challenge( {\"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"} ) ```",
      "content": "## Examples\n\n### Create a challenge for a factor\n\n```python\nresponse = supabase.auth.mfa.challenge(\n    {\"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"}\n)\n```",
      "line_start": 2007,
      "line_end": 2023,
      "category": "Multi-Factor Authentication",
      "examples": [
        "Create a challenge for a factor"
      ],
      "code_blocks": [
        "response = supabase.auth.mfa.challenge(\n    {\"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"}\n)"
      ]
    },
    {
      "title": "mfa.verify()",
      "description": "```python response = supabase.auth.mfa.verify( { \"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\", \"challenge_id\": \"4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15\", \"code\": \"123456\", } ) ```",
      "content": "## Examples\n\n### Verify a challenge for a factor\n\n```python\nresponse = supabase.auth.mfa.verify(\n    {\n        \"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n        \"challenge_id\": \"4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15\",\n        \"code\": \"123456\",\n    }\n)\n```",
      "line_start": 2024,
      "line_end": 2044,
      "category": "Multi-Factor Authentication",
      "examples": [
        "Verify a challenge for a factor"
      ],
      "code_blocks": [
        "response = supabase.auth.mfa.verify(\n    {\n        \"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n        \"challenge_id\": \"4034ae6f-a8ce-4fb5-8ee5-69a5863a7c15\",\n        \"code\": \"123456\",\n    }\n)"
      ]
    },
    {
      "title": "mfa.challenge_and_verify()",
      "description": "```python response = supabase.auth.mfa.challenge_and_verify( { \"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\", \"code\": \"123456\", } ) ```",
      "content": "## Examples\n\n### Create and verify a challenge for a factor\n\n```python\nresponse = supabase.auth.mfa.challenge_and_verify(\n    {\n        \"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n        \"code\": \"123456\",\n    }\n)\n```",
      "line_start": 2045,
      "line_end": 2064,
      "category": "Multi-Factor Authentication",
      "examples": [
        "Create and verify a challenge for a factor"
      ],
      "code_blocks": [
        "response = supabase.auth.mfa.challenge_and_verify(\n    {\n        \"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n        \"code\": \"123456\",\n    }\n)"
      ]
    },
    {
      "title": "mfa.unenroll()",
      "description": "```python response = supabase.auth.mfa.unenroll( {\"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"} ) ```",
      "content": "## Examples\n\n### Unenroll a factor\n\n```python\nresponse = supabase.auth.mfa.unenroll(\n    {\"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"}\n)\n```",
      "line_start": 2065,
      "line_end": 2081,
      "category": "Multi-Factor Authentication",
      "examples": [
        "Unenroll a factor"
      ],
      "code_blocks": [
        "response = supabase.auth.mfa.unenroll(\n    {\"factor_id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\"}\n)"
      ]
    },
    {
      "title": "mfa.get_authenticator_assurance_level()",
      "description": "```python response = supabase.auth.mfa.get_authenticator_assurance_level() ```",
      "content": "## Examples\n\n### Get the AAL details of a session\n\n```python\nresponse = supabase.auth.mfa.get_authenticator_assurance_level()\n```",
      "line_start": 2082,
      "line_end": 2096,
      "category": "Multi-Factor Authentication",
      "examples": [
        "Get the AAL details of a session"
      ],
      "code_blocks": [
        "response = supabase.auth.mfa.get_authenticator_assurance_level()"
      ]
    },
    {
      "title": "Overview",
      "description": "```python from supabase import create_client from supabase.lib.client_options import ClientOptions",
      "content": "## Examples\n\n### Create server-side auth client\n\n```python\nfrom supabase import create_client\nfrom supabase.lib.client_options import ClientOptions\n\nsupabase = create_client(\n    supabase_url,\n    service_role_key,\n    options=ClientOptions(\n        auto_refresh_token=False,\n        persist_session=False,\n    )\n)\n\n# Access auth admin api\nadmin_auth_client = supabase.auth.admin\n```",
      "line_start": 2097,
      "line_end": 2124,
      "category": "Utilities",
      "examples": [
        "Create server-side auth client"
      ],
      "code_blocks": [
        "from supabase import create_client\nfrom supabase.lib.client_options import ClientOptions\n\nsupabase = create_client(\n    supabase_url,\n    service_role_key,\n    options=ClientOptions(\n        auto_refresh_token=False,\n        persist_session=False,\n    )\n)\n\n# Access auth admin api\nadmin_auth_client = supabase.auth.admin"
      ]
    },
    {
      "title": "get_user_by_id()",
      "description": "```python response = supabase.auth.admin.get_user_by_id(1) ```",
      "content": "## Examples\n\n### Fetch the user object using the access_token jwt\n\n```python\nresponse = supabase.auth.admin.get_user_by_id(1)\n```",
      "line_start": 2125,
      "line_end": 2139,
      "category": "Authentication",
      "examples": [
        "Fetch the user object using the access_token jwt"
      ],
      "code_blocks": [
        "response = supabase.auth.admin.get_user_by_id(1)"
      ]
    },
    {
      "title": "list_users()",
      "description": "```python response = supabase.auth.admin.list_users() ```",
      "content": "## Examples\n\n### Get a page of users\n\n```python\nresponse = supabase.auth.admin.list_users()\n```\n\n\n### Paginated list of users\n\n```python\nresponse = supabase.auth.admin.list_users(\n    page=1,\n    per_page=1000,\n)\n```",
      "line_start": 2140,
      "line_end": 2164,
      "category": "Admin Functions",
      "examples": [
        "Get a page of users",
        "Paginated list of users"
      ],
      "code_blocks": [
        "response = supabase.auth.admin.list_users()",
        "response = supabase.auth.admin.list_users(\n    page=1,\n    per_page=1000,\n)"
      ]
    },
    {
      "title": "create_user()",
      "description": "```python response = supabase.auth.admin.create_user( { \"email\": \"user@email.com\", \"password\": \"password\", \"user_metadata\": {\"name\": \"Yoda\"}, } ) ```",
      "content": "## Examples\n\n### With custom user metadata\n\n```python\nresponse = supabase.auth.admin.create_user(\n    {\n        \"email\": \"user@email.com\",\n        \"password\": \"password\",\n        \"user_metadata\": {\"name\": \"Yoda\"},\n    }\n)\n```\n\n\n### Auto-confirm the user's email\n\n```python\nresponse = supabase.auth.admin.create_user(\n    {\n        \"email\": \"user@email.com\",\n        \"email_confirm\": True,\n    }\n)\n```\n\n\n### Auto-confirm the user's phone number\n\n```python\nresponse = supabase.auth.admin.create_user(\n    {\n        \"phone\": \"1234567890\",\n        \"phone_confirm\": True,\n    }\n)\n```",
      "line_start": 2165,
      "line_end": 2209,
      "category": "Admin Functions",
      "examples": [
        "With custom user metadata",
        "Auto-confirm the user's email",
        "Auto-confirm the user's phone number"
      ],
      "code_blocks": [
        "response = supabase.auth.admin.create_user(\n    {\n        \"email\": \"user@email.com\",\n        \"password\": \"password\",\n        \"user_metadata\": {\"name\": \"Yoda\"},\n    }\n)",
        "response = supabase.auth.admin.create_user(\n    {\n        \"email\": \"user@email.com\",\n        \"email_confirm\": True,\n    }\n)",
        "response = supabase.auth.admin.create_user(\n    {\n        \"phone\": \"1234567890\",\n        \"phone_confirm\": True,\n    }\n)"
      ]
    },
    {
      "title": "delete_user()",
      "description": "Delete a user. Requires a `service_role` key.",
      "content": "Delete a user. Requires a `service_role` key.\n\n## Examples\n\n### Removes a user\n\n```python\nsupabase.auth.admin.delete_user(\n    \"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n)\n```",
      "line_start": 2210,
      "line_end": 2226,
      "category": "Admin Functions",
      "examples": [
        "Removes a user"
      ],
      "code_blocks": [
        "supabase.auth.admin.delete_user(\n    \"715ed5db-f090-4b8c-a067-640ecee36aa0\"\n)"
      ]
    },
    {
      "title": "invite_user_by_email()",
      "description": "Sends an invite link to an email address.",
      "content": "Sends an invite link to an email address.\n\n## Examples\n\n### Invite a user\n\n```python\nresponse = supabase.auth.admin.invite_user_by_email(\"email@example.com\")\n```",
      "line_start": 2227,
      "line_end": 2241,
      "category": "Admin Functions",
      "examples": [
        "Invite a user"
      ],
      "code_blocks": [
        "response = supabase.auth.admin.invite_user_by_email(\"email@example.com\")"
      ]
    },
    {
      "title": "generate_link()",
      "description": "```python response = supabase.auth.admin.generate_link( { \"type\": \"signup\", \"email\": \"email@example.com\", \"password\": \"secret\", } ) ```",
      "content": "## Examples\n\n### Generate a signup link\n\n```python\nresponse = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"signup\",\n        \"email\": \"email@example.com\",\n        \"password\": \"secret\",\n    }\n)\n```\n\n\n### Generate an invite link\n\n```python\nresponse = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"invite\",\n        \"email\": \"email@example.com\",\n    }\n)\n```\n\n\n### Generate a magic link\n\n```python\nresponse = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"magiclink\",\n        \"email\": \"email@example.com\",\n    }\n)\n```\n\n\n### Generate a recovery link\n\n```python\nresponse = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"recovery\",\n        \"email\": \"email@example.com\",\n    }\n)\n```\n\n\n### Generate links to change current email address\n\n```python\n# Generate an email change link to be sent to the current email address\nresponse = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"email_change_current\",\n        \"email\": \"current.email@example.com\",\n        \"new_email\": \"new.email@example.com\",\n    }\n)\n\n# Generate an email change link to be sent to the new email address\nresponse = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"email_change_new\",\n        \"email\": \"current.email@example.com\",\n        \"new_email\": \"new.email@example.com\",\n    }\n)\n```",
      "line_start": 2242,
      "line_end": 2321,
      "category": "Admin Functions",
      "examples": [
        "Generate a signup link",
        "Generate an invite link",
        "Generate a magic link",
        "Generate a recovery link",
        "Generate links to change current email address"
      ],
      "code_blocks": [
        "response = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"signup\",\n        \"email\": \"email@example.com\",\n        \"password\": \"secret\",\n    }\n)",
        "response = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"invite\",\n        \"email\": \"email@example.com\",\n    }\n)",
        "response = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"magiclink\",\n        \"email\": \"email@example.com\",\n    }\n)",
        "response = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"recovery\",\n        \"email\": \"email@example.com\",\n    }\n)",
        "# Generate an email change link to be sent to the current email address\nresponse = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"email_change_current\",\n        \"email\": \"current.email@example.com\",\n        \"new_email\": \"new.email@example.com\",\n    }\n)\n\n# Generate an email change link to be sent to the new email address\nresponse = supabase.auth.admin.generate_link(\n    {\n        \"type\": \"email_change_new\",\n        \"email\": \"current.email@example.com\",\n        \"new_email\": \"new.email@example.com\",\n    }\n)"
      ]
    },
    {
      "title": "update_user_by_id()",
      "description": "```python response = supabase.auth.admin.update_user_by_id( \"11111111-1111-1111-1111-111111111111\", { \"email\": \"new@email.com\", } ) ```",
      "content": "## Examples\n\n### Updates a user's email\n\n```python\nresponse = supabase.auth.admin.update_user_by_id(\n    \"11111111-1111-1111-1111-111111111111\",\n    {\n        \"email\": \"new@email.com\",\n    }\n)\n```\n\n\n### Updates a user's password\n\n```python\nresponse = supabase.auth.admin.update_user_by_id(\n    \"6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4\",\n    {\n        \"password\": \"new_password\",\n    }\n)\n```\n\n\n### Updates a user's metadata\n\n```python\nresponse = supabase.auth.admin.update_user_by_id(\n    \"6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4\",\n    {\n        \"user_metadata\": {\"hello\": \"world\"},\n    }\n)\n```\n\n\n### Updates a user's app_metadata\n\n```python\nresponse = supabase.auth.admin.update_user_by_id(\n    \"6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4\",\n    {\n        \"app_metadata\": {\"plan\": \"trial\"},\n    }\n)\n```\n\n\n### Confirms a user's email address\n\n```python\nresponse = supabase.auth.admin.update_user_by_id(\n    \"6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4\",\n    {\n        \"email_confirm\": True,\n    }\n)\n```\n\n\n### Confirms a user's phone number\n\n```python\nresponse = supabase.auth.admin.update_user_by_id(\n    \"6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4\",\n    {\n        \"phone_confirm\": True,\n    }\n)\n```",
      "line_start": 2322,
      "line_end": 2401,
      "category": "Authentication",
      "examples": [
        "Updates a user's email",
        "Updates a user's password",
        "Updates a user's metadata",
        "Updates a user's app_metadata",
        "Confirms a user's email address",
        "Confirms a user's phone number"
      ],
      "code_blocks": [
        "response = supabase.auth.admin.update_user_by_id(\n    \"11111111-1111-1111-1111-111111111111\",\n    {\n        \"email\": \"new@email.com\",\n    }\n)",
        "response = supabase.auth.admin.update_user_by_id(\n    \"6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4\",\n    {\n        \"password\": \"new_password\",\n    }\n)",
        "response = supabase.auth.admin.update_user_by_id(\n    \"6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4\",\n    {\n        \"user_metadata\": {\"hello\": \"world\"},\n    }\n)",
        "response = supabase.auth.admin.update_user_by_id(\n    \"6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4\",\n    {\n        \"app_metadata\": {\"plan\": \"trial\"},\n    }\n)",
        "response = supabase.auth.admin.update_user_by_id(\n    \"6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4\",\n    {\n        \"email_confirm\": True,\n    }\n)",
        "response = supabase.auth.admin.update_user_by_id(\n    \"6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4\",\n    {\n        \"phone_confirm\": True,\n    }\n)"
      ]
    },
    {
      "title": "mfa.delete_factor()",
      "description": "```python response = supabase.auth.admin.mfa.delete_factor( { \"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\", \"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\" } ) ```",
      "content": "## Examples\n\n### Delete a factor for a user\n\n```python\nresponse = supabase.auth.admin.mfa.delete_factor(\n    {\n        \"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n        \"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\"\n    }\n)\n```",
      "line_start": 2402,
      "line_end": 2421,
      "category": "Multi-Factor Authentication",
      "examples": [
        "Delete a factor for a user"
      ],
      "code_blocks": [
        "response = supabase.auth.admin.mfa.delete_factor(\n    {\n        \"id\": \"34e770dd-9ff9-416c-87fa-43b31d7ef225\",\n        \"user_id\": \"a89baba7-b1b7-440f-b4bb-91026967f66b\"\n    }\n)"
      ]
    },
    {
      "title": "invoke()",
      "description": "Invoke a Supabase Function.",
      "content": "Invoke a Supabase Function.\n\n\n## Examples\n\n### Basic invocation\n\n```python\nresponse = supabase.functions.invoke(\n    \"hello-world\",\n    invoke_options={\n        \"body\": {\"name\": \"Functions\"},\n    },\n)\n```\n\n\n### Error handling\n\n```python\nfrom supafunc.errors import FunctionsRelayError, FunctionsHttpError\n\ntry:\n    response = supabase.functions.invoke(\n        \"hello-world\",\n        invoke_options={\n            \"body\": {\"foo\": \"bar\"},\n            \"headers\": {\"my-custom-header\": \"my-custom-header-value\"},\n        },\n    )\nexcept FunctionsHttpError as exception:\n    err = exception.to_dict()\n    print(f'Function returned an error {err.get(\"message\")}')\nexcept FunctionsRelayError as exception:\n    err = exception.to_dict()\n    print(f'Relay error: {err.get(\"message\")}')\n```\n\n\n### Passing custom headers\n\n```python\nresponse = supabase.functions.invoke(\n    \"hello-world\",\n    invoke_options={\n        \"headers\": {\n            \"my-custom-header\": \"my-custom-header-value\",\n        },\n        \"body\": {\"foo\": \"bar\"},\n    },\n)\n```",
      "line_start": 2422,
      "line_end": 2479,
      "category": "Edge Functions",
      "examples": [
        "Basic invocation",
        "Error handling",
        "Passing custom headers"
      ],
      "code_blocks": [
        "response = supabase.functions.invoke(\n    \"hello-world\",\n    invoke_options={\n        \"body\": {\"name\": \"Functions\"},\n    },\n)",
        "from supafunc.errors import FunctionsRelayError, FunctionsHttpError\n\ntry:\n    response = supabase.functions.invoke(\n        \"hello-world\",\n        invoke_options={\n            \"body\": {\"foo\": \"bar\"},\n            \"headers\": {\"my-custom-header\": \"my-custom-header-value\"},\n        },\n    )\nexcept FunctionsHttpError as exception:\n    err = exception.to_dict()\n    print(f'Function returned an error {err.get(\"message\")}')\nexcept FunctionsRelayError as exception:\n    err = exception.to_dict()\n    print(f'Relay error: {err.get(\"message\")}')",
        "response = supabase.functions.invoke(\n    \"hello-world\",\n    invoke_options={\n        \"headers\": {\n            \"my-custom-header\": \"my-custom-header-value\",\n        },\n        \"body\": {\"foo\": \"bar\"},\n    },\n)"
      ]
    },
    {
      "title": "Overview",
      "description": "Realtime in Python only works with the asynchronous client. You can initialize a new Supabase client using the `acreate_client()` method.",
      "content": "Realtime in Python only works with the asynchronous client.\nYou can initialize a new Supabase client using the `acreate_client()` method.\n\n- Some Realtime methods are asynchronous and must be awaited. Ensure these methods are called within an `async` function.\n- In the following Realtime examples, certain methods are awaited. These should be enclosed within an `async` function.\n- When an asynchronous method needs to be used within a synchronous context, such as the callback for `.subscribe()`, utilize `asyncio.create_task()` to schedule the coroutine. This is why the `acreate_client` example includes an import of `asyncio`.\n\n\n## Examples\n\n### acreate_client()\n\n```python\nimport os\nimport asyncio\nfrom supabase import acreate_client, AsyncClient\n\nurl: str = os.environ.get(\"SUPABASE_URL\")\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n\nasync def create_supabase():\n  supabase: AsyncClient = await acreate_client(url, key)\n  return supabase\n```",
      "line_start": 2480,
      "line_end": 2509,
      "category": "Utilities",
      "examples": [
        "acreate_client()"
      ],
      "code_blocks": [
        "import os\nimport asyncio\nfrom supabase import acreate_client, AsyncClient\n\nurl: str = os.environ.get(\"SUPABASE_URL\")\nkey: str = os.environ.get(\"SUPABASE_KEY\")\n\nasync def create_supabase():\n  supabase: AsyncClient = await acreate_client(url, key)\n  return supabase"
      ]
    },
    {
      "title": "on().subscribe()",
      "description": "```python channel = supabase.channel(\"room1\")",
      "content": "## Examples\n\n### Listen to broadcast messages\n\n```python\nchannel = supabase.channel(\"room1\")\n\ndef on_subscribe(status, err):\n    if status == RealtimeSubscribeStates.SUBSCRIBED:\n        asyncio.create_task(channel.send_broadcast(\n            \"cursor-pos\",\n            {\"x\": random.random(), \"y\": random.random()}\n        ))\n\ndef handle_broadcast(payload):\n    print(\"Cursor position received!\", payload)\n\nawait channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)\n```\n\n\n### Listen to presence sync\n\n```python\nchannel = supabase.channel(\"room1\")\n\ndef on_subscribe(status, err):\n    if status == RealtimeSubscribeStates.SUBSCRIBED:\n        asyncio.create_task(channel.track({\"online_at\": datetime.datetime.now().isoformat()}))\n\ndef handle_presence_sync():\n    print(\"Synced presence state: \", channel.presence.state)\n\nawait channel.on_presence_sync(callback=handle_presence_sync).subscribe(on_subscribe)\n```\n\n\n### Listen to presence join\n\n```python\nchannel = supabase.channel(\"room1\")\n\ndef handle_presence_join(key, current_presence, new_presence):\n    print(\"Newly joined presences: \", new_presence)\n\ndef on_subscribe(status, err):\n    if status == RealtimeSubscribeStates.SUBSCRIBED:\n        asyncio.create_task(channel.track({\"online_at\": datetime.datetime.now().isoformat()}))\n\nawait channel.on_presence_join(callback=handle_presence_join).subscribe(on_subscribe)\n```\n\n\n### Listen to presence leave\n\n```python\nchannel = supabase.channel(\"room1\")\n\ndef handle_presence_leave(key, current_presence, left_presence):\n    print(\"Newly left presences: \", left_presence)\n\ndef on_subscribe(status, err):\n    if status == RealtimeSubscribeStates.SUBSCRIBED:\n        asyncio.create_task(channel.track({\"online_at\": datetime.datetime.now().isoformat()}))\n        asyncio.create_task(channel.untrack())\n\nawait channel.on_presence_leave(callback=handle_presence_leave).subscribe(on_subscribe)\n```\n\n\n### Listen to all database changes\n\n```python\nresponse = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"*\", schema=\"*\", callback=handle_record_updated)\n    .subscribe()\n)\n```\n\n\n### Listen to a specific table\n\n```python\nresponse = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"*\", schema=\"public\", table=\"countries\", callback=handle_record_updated)\n    .subscribe()\n)\n```\n\n\n### Listen to inserts\n\n```python\nresponse = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"INSERT\", schema=\"public\", table=\"countries\", callback=handle_record_inserted)\n    .subscribe()\n)\n```\n\n\n### Listen to updates\n\n```python\nresponse = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"UPDATE\", schema=\"public\", table=\"countries\", callback=handle_record_updated)\n    .subscribe()\n)\n```\n\n\n### Listen to deletes\n\n```python\nresponse = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"DELETE\", schema=\"public\", table=\"countries\", callback=handle_record_deleted)\n    .subscribe()\n)\n```\n\n\n### Listen to multiple events\n\n```python\nresponse = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"INSERT\", schema=\"public\", table=\"countries\", callback=handle_record_inserted)\n    .on_postgres_changes(\"DELETE\", schema=\"public\", table=\"countries\", callback=handle_record_deleted)\n    .subscribe()\n)\n```\n\n\n### Listen to row level changes\n\n```python\nresponse = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"UPDATE\", schema=\"public\", table=\"countries\", filter=\"id=eq.200\", callback=handle_record_updated)\n    .subscribe()\n)\n```",
      "line_start": 2510,
      "line_end": 2663,
      "category": "Realtime",
      "examples": [
        "Listen to broadcast messages",
        "Listen to presence sync",
        "Listen to presence join",
        "Listen to presence leave",
        "Listen to all database changes",
        "Listen to a specific table",
        "Listen to inserts",
        "Listen to updates",
        "Listen to deletes",
        "Listen to multiple events",
        "Listen to row level changes"
      ],
      "code_blocks": [
        "channel = supabase.channel(\"room1\")\n\ndef on_subscribe(status, err):\n    if status == RealtimeSubscribeStates.SUBSCRIBED:\n        asyncio.create_task(channel.send_broadcast(\n            \"cursor-pos\",\n            {\"x\": random.random(), \"y\": random.random()}\n        ))\n\ndef handle_broadcast(payload):\n    print(\"Cursor position received!\", payload)\n\nawait channel.on_broadcast(event=\"cursor-pos\", callback=handle_broadcast).subscribe(on_subscribe)",
        "channel = supabase.channel(\"room1\")\n\ndef on_subscribe(status, err):\n    if status == RealtimeSubscribeStates.SUBSCRIBED:\n        asyncio.create_task(channel.track({\"online_at\": datetime.datetime.now().isoformat()}))\n\ndef handle_presence_sync():\n    print(\"Synced presence state: \", channel.presence.state)\n\nawait channel.on_presence_sync(callback=handle_presence_sync).subscribe(on_subscribe)",
        "channel = supabase.channel(\"room1\")\n\ndef handle_presence_join(key, current_presence, new_presence):\n    print(\"Newly joined presences: \", new_presence)\n\ndef on_subscribe(status, err):\n    if status == RealtimeSubscribeStates.SUBSCRIBED:\n        asyncio.create_task(channel.track({\"online_at\": datetime.datetime.now().isoformat()}))\n\nawait channel.on_presence_join(callback=handle_presence_join).subscribe(on_subscribe)",
        "channel = supabase.channel(\"room1\")\n\ndef handle_presence_leave(key, current_presence, left_presence):\n    print(\"Newly left presences: \", left_presence)\n\ndef on_subscribe(status, err):\n    if status == RealtimeSubscribeStates.SUBSCRIBED:\n        asyncio.create_task(channel.track({\"online_at\": datetime.datetime.now().isoformat()}))\n        asyncio.create_task(channel.untrack())\n\nawait channel.on_presence_leave(callback=handle_presence_leave).subscribe(on_subscribe)",
        "response = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"*\", schema=\"*\", callback=handle_record_updated)\n    .subscribe()\n)",
        "response = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"*\", schema=\"public\", table=\"countries\", callback=handle_record_updated)\n    .subscribe()\n)",
        "response = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"INSERT\", schema=\"public\", table=\"countries\", callback=handle_record_inserted)\n    .subscribe()\n)",
        "response = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"UPDATE\", schema=\"public\", table=\"countries\", callback=handle_record_updated)\n    .subscribe()\n)",
        "response = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"DELETE\", schema=\"public\", table=\"countries\", callback=handle_record_deleted)\n    .subscribe()\n)",
        "response = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"INSERT\", schema=\"public\", table=\"countries\", callback=handle_record_inserted)\n    .on_postgres_changes(\"DELETE\", schema=\"public\", table=\"countries\", callback=handle_record_deleted)\n    .subscribe()\n)",
        "response = (\n    await supabase.channel(\"room1\")\n    .on_postgres_changes(\"UPDATE\", schema=\"public\", table=\"countries\", filter=\"id=eq.200\", callback=handle_record_updated)\n    .subscribe()\n)"
      ]
    },
    {
      "title": "removeChannel()",
      "description": "```python await supabase.remove_channel(myChannel) ```",
      "content": "## Examples\n\n### Removes a channel\n\n```python\nawait supabase.remove_channel(myChannel)\n```",
      "line_start": 2664,
      "line_end": 2678,
      "category": "Realtime",
      "examples": [
        "Removes a channel"
      ],
      "code_blocks": [
        "await supabase.remove_channel(myChannel)"
      ]
    },
    {
      "title": "removeAllChannels()",
      "description": "```python await supabase.remove_all_channels() ```",
      "content": "## Examples\n\n### Remove all channels\n\n```python\nawait supabase.remove_all_channels()\n```",
      "line_start": 2679,
      "line_end": 2693,
      "category": "Realtime",
      "examples": [
        "Remove all channels"
      ],
      "code_blocks": [
        "await supabase.remove_all_channels()"
      ]
    },
    {
      "title": "getChannels()",
      "description": "```python channels = supabase.get_channels() ```",
      "content": "## Examples\n\n### Get all channels\n\n```python\nchannels = supabase.get_channels()\n```",
      "line_start": 2694,
      "line_end": 2708,
      "category": "Realtime",
      "examples": [
        "Get all channels"
      ],
      "code_blocks": [
        "channels = supabase.get_channels()"
      ]
    },
    {
      "title": "broadcastMessage()",
      "description": "Broadcast a message to all connected clients to a channel.",
      "content": "Broadcast a message to all connected clients to a channel.\n\n\n## Examples\n\n### Send a message via websocket\n\n```python\nchannel = supabase.channel(\"room1\")\n\ndef on_subscribe(status, err):\n    if status == RealtimeSubscribeStates.SUBSCRIBED:\n        asyncio.create_task(channel.send_broadcast('cursor-pos', {\"x\": random.random(), \"y\": random.random()}))\n\nawait channel.subscribe(on_subscribe)\n```",
      "line_start": 2709,
      "line_end": 2730,
      "category": "Realtime",
      "examples": [
        "Send a message via websocket"
      ],
      "code_blocks": [
        "channel = supabase.channel(\"room1\")\n\ndef on_subscribe(status, err):\n    if status == RealtimeSubscribeStates.SUBSCRIBED:\n        asyncio.create_task(channel.send_broadcast('cursor-pos', {\"x\": random.random(), \"y\": random.random()}))\n\nawait channel.subscribe(on_subscribe)"
      ]
    },
    {
      "title": "create_bucket()",
      "description": "Creates a new Storage bucket",
      "content": "Creates a new Storage bucket\n\n\n## Examples\n\n### Create bucket\n\n```python\nresponse = (\n    supabase.storage\n    .create_bucket(\n        \"avatars\",\n        options={\n            \"public\": False,\n            \"allowed_mime_types\": [\"image/png\"],\n            \"file_size_limit\": 1024,\n        }\n    )\n)\n```",
      "line_start": 2731,
      "line_end": 2756,
      "category": "Storage",
      "examples": [
        "Create bucket"
      ],
      "code_blocks": [
        "response = (\n    supabase.storage\n    .create_bucket(\n        \"avatars\",\n        options={\n            \"public\": False,\n            \"allowed_mime_types\": [\"image/png\"],\n            \"file_size_limit\": 1024,\n        }\n    )\n)"
      ]
    },
    {
      "title": "get_bucket()",
      "description": "Retrieves the details of an existing Storage bucket.",
      "content": "Retrieves the details of an existing Storage bucket.\n\n\n## Examples\n\n### Get bucket\n\n```python\nresponse = supabase.storage.get_bucket(\"avatars\")\n```",
      "line_start": 2757,
      "line_end": 2772,
      "category": "Storage",
      "examples": [
        "Get bucket"
      ],
      "code_blocks": [
        "response = supabase.storage.get_bucket(\"avatars\")"
      ]
    },
    {
      "title": "list_buckets()",
      "description": "Retrieves the details of all Storage buckets within an existing project.",
      "content": "Retrieves the details of all Storage buckets within an existing project.\n\n\n## Examples\n\n### List buckets\n\n```python\nresponse = supabase.storage.list_buckets()\n```",
      "line_start": 2773,
      "line_end": 2788,
      "category": "Storage",
      "examples": [
        "List buckets"
      ],
      "code_blocks": [
        "response = supabase.storage.list_buckets()"
      ]
    },
    {
      "title": "update_bucket()",
      "description": "Updates a Storage bucket",
      "content": "Updates a Storage bucket\n\n\n## Examples\n\n### Update bucket\n\n```python\nresponse = (\n    supabase.storage\n    .update_bucket(\n        \"avatars\",\n        options={\n            \"public\": False,\n            \"allowed_mime_types\": [\"image/png\"],\n            \"file_size_limit\": 1024,\n        }\n    )\n)\n```",
      "line_start": 2789,
      "line_end": 2814,
      "category": "Storage",
      "examples": [
        "Update bucket"
      ],
      "code_blocks": [
        "response = (\n    supabase.storage\n    .update_bucket(\n        \"avatars\",\n        options={\n            \"public\": False,\n            \"allowed_mime_types\": [\"image/png\"],\n            \"file_size_limit\": 1024,\n        }\n    )\n)"
      ]
    },
    {
      "title": "delete_bucket()",
      "description": "Deletes an existing bucket. A bucket can't be deleted with existing objects inside it. You must first `empty()` the bucket.",
      "content": "Deletes an existing bucket. A bucket can't be deleted with existing objects inside it. You must first `empty()` the bucket.\n\n\n## Examples\n\n### Delete bucket\n\n```python\nresponse = supabase.storage.delete_bucket(\"avatars\")\n```",
      "line_start": 2815,
      "line_end": 2830,
      "category": "Storage",
      "examples": [
        "Delete bucket"
      ],
      "code_blocks": [
        "response = supabase.storage.delete_bucket(\"avatars\")"
      ]
    },
    {
      "title": "empty_bucket()",
      "description": "Removes all objects inside a single bucket.",
      "content": "Removes all objects inside a single bucket.\n\n\n## Examples\n\n### Empty bucket\n\n```python\nresponse = supabase.storage.empty_bucket(\"avatars\")\n```",
      "line_start": 2831,
      "line_end": 2846,
      "category": "Storage",
      "examples": [
        "Empty bucket"
      ],
      "code_blocks": [
        "response = supabase.storage.empty_bucket(\"avatars\")"
      ]
    },
    {
      "title": "from_.upload()",
      "description": "Uploads a file to an existing bucket.",
      "content": "Uploads a file to an existing bucket.\n\n## Examples\n\n### Upload file using filepath\n\n```python\nwith open(\"./public/avatar1.png\", \"rb\") as f:\n    response = (\n        supabase.storage\n        .from_(\"avatars\")\n        .upload(\n            file=f,\n            path=\"public/avatar1.png\",\n            file_options={\"cache-control\": \"3600\", \"upsert\": \"false\"}\n        )\n    )\n```",
      "line_start": 2847,
      "line_end": 2870,
      "category": "Storage",
      "examples": [
        "Upload file using filepath"
      ],
      "code_blocks": [
        "with open(\"./public/avatar1.png\", \"rb\") as f:\n    response = (\n        supabase.storage\n        .from_(\"avatars\")\n        .upload(\n            file=f,\n            path=\"public/avatar1.png\",\n            file_options={\"cache-control\": \"3600\", \"upsert\": \"false\"}\n        )\n    )"
      ]
    },
    {
      "title": "from_.download()",
      "description": "Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `get_public_url` instead.",
      "content": "Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `get_public_url` instead.\n\n## Examples\n\n### Download file\n\n```python\nwith open(\"./myfolder/avatar1.png\", \"wb+\") as f:\n    response = (\n        supabase.storage\n        .from_(\"avatars\")\n        .download(\"folder/avatar1.png\")\n    )\n    f.write(response)\n```\n\n\n### Download file with transformations\n\n```python\nwith open(\"./myfolder/avatar1.png\", \"wb+\") as f:\n    response = (\n        supabase.storage\n        .from_(\"avatars\")\n        .download(\n            \"folder/avatar1.png\",\n            {\"transform\": {\"width\": 100, \"height\": 100, \"quality\": 80}},\n        )\n    )\n    f.write(response)\n```",
      "line_start": 2871,
      "line_end": 2907,
      "category": "Storage",
      "examples": [
        "Download file",
        "Download file with transformations"
      ],
      "code_blocks": [
        "with open(\"./myfolder/avatar1.png\", \"wb+\") as f:\n    response = (\n        supabase.storage\n        .from_(\"avatars\")\n        .download(\"folder/avatar1.png\")\n    )\n    f.write(response)",
        "with open(\"./myfolder/avatar1.png\", \"wb+\") as f:\n    response = (\n        supabase.storage\n        .from_(\"avatars\")\n        .download(\n            \"folder/avatar1.png\",\n            {\"transform\": {\"width\": 100, \"height\": 100, \"quality\": 80}},\n        )\n    )\n    f.write(response)"
      ]
    },
    {
      "title": "from_.list()",
      "description": "Lists all the files within a bucket.",
      "content": "Lists all the files within a bucket.\n\n## Examples\n\n### List files in a bucket\n\n```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .list(\n        \"folder\",\n        {\n            \"limit\": 100,\n            \"offset\": 0,\n            \"sortBy\": {\"column\": \"name\", \"order\": \"desc\"},\n        }\n    )\n)\n```\n\n\n### Search files in a bucket\n\n```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .list(\n        \"folder\",\n        {\n            \"limit\": 100,\n            \"offset\": 0,\n            \"sortBy\": {\"column\": \"name\", \"order\": \"desc\"},\n            \"search\": \"jon\",\n        }\n    )\n)\n```",
      "line_start": 2908,
      "line_end": 2952,
      "category": "Storage",
      "examples": [
        "List files in a bucket",
        "Search files in a bucket"
      ],
      "code_blocks": [
        "response = (\n    supabase.storage\n    .from_(\"avatars\")\n    .list(\n        \"folder\",\n        {\n            \"limit\": 100,\n            \"offset\": 0,\n            \"sortBy\": {\"column\": \"name\", \"order\": \"desc\"},\n        }\n    )\n)",
        "response = (\n    supabase.storage\n    .from_(\"avatars\")\n    .list(\n        \"folder\",\n        {\n            \"limit\": 100,\n            \"offset\": 0,\n            \"sortBy\": {\"column\": \"name\", \"order\": \"desc\"},\n            \"search\": \"jon\",\n        }\n    )\n)"
      ]
    },
    {
      "title": "from_.update()",
      "description": "Replaces an existing file at the specified path with a new one.",
      "content": "Replaces an existing file at the specified path with a new one.\n\n## Examples\n\n### Update file\n\n```python\nwith open(\"./public/avatar1.png\", \"rb\") as f:\n    response = (\n        supabase.storage\n        .from_(\"avatars\")\n        .update(\n            file=f,\n            path=\"public/avatar1.png\",\n            file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"}\n        )\n    )\n```",
      "line_start": 2953,
      "line_end": 2976,
      "category": "Database Operations",
      "examples": [
        "Update file"
      ],
      "code_blocks": [
        "with open(\"./public/avatar1.png\", \"rb\") as f:\n    response = (\n        supabase.storage\n        .from_(\"avatars\")\n        .update(\n            file=f,\n            path=\"public/avatar1.png\",\n            file_options={\"cache-control\": \"3600\", \"upsert\": \"true\"}\n        )\n    )"
      ]
    },
    {
      "title": "from_.move()",
      "description": "Moves an existing file to a new path in the same bucket.",
      "content": "Moves an existing file to a new path in the same bucket.\n\n## Examples\n\n### Move file\n\n```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .move(\n        \"public/avatar1.png\",\n        \"private/avatar2.png\"\n    )\n)\n```",
      "line_start": 2977,
      "line_end": 2998,
      "category": "Storage",
      "examples": [
        "Move file"
      ],
      "code_blocks": [
        "response = (\n    supabase.storage\n    .from_(\"avatars\")\n    .move(\n        \"public/avatar1.png\",\n        \"private/avatar2.png\"\n    )\n)"
      ]
    },
    {
      "title": "from_.copy()",
      "description": "Copies an existing file to a new path in the same bucket.",
      "content": "Copies an existing file to a new path in the same bucket.\n\n## Examples\n\n### Copy file\n\n```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .copy(\n        \"public/avatar1.png\",\n        \"private/avatar2.png\"\n    )\n)\n```",
      "line_start": 2999,
      "line_end": 3020,
      "category": "Storage",
      "examples": [
        "Copy file"
      ],
      "code_blocks": [
        "response = (\n    supabase.storage\n    .from_(\"avatars\")\n    .copy(\n        \"public/avatar1.png\",\n        \"private/avatar2.png\"\n    )\n)"
      ]
    },
    {
      "title": "from_.remove()",
      "description": "Deletes files within the same bucket",
      "content": "Deletes files within the same bucket\n\n## Examples\n\n### Delete file\n\n```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .remove([\"folder/avatar1.png\"])\n)\n```",
      "line_start": 3021,
      "line_end": 3039,
      "category": "Storage",
      "examples": [
        "Delete file"
      ],
      "code_blocks": [
        "response = (\n    supabase.storage\n    .from_(\"avatars\")\n    .remove([\"folder/avatar1.png\"])\n)"
      ]
    },
    {
      "title": "from_.create_signed_url()",
      "description": "Creates a signed URL for a file. Use a signed URL to share a file for a fixed amount of time.",
      "content": "Creates a signed URL for a file. Use a signed URL to share a file for a fixed amount of time.\n\n## Examples\n\n### Create Signed URL\n\n```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .create_signed_url(\n        \"folder/avatar1.png\",\n        60\n    )\n)\n```\n\n\n### Create a signed URL for an asset with transformations\n\n```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .create_signed_url(\n        \"folder/avatar1.png\",\n        60,\n        {\"transform\": {\"width\": 100, \"height\": 100}}\n    )\n)\n```\n\n\n### Create a signed URL which triggers the download of the asset\n\n```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .create_signed_url(\n        \"folder/avatar1.png\",\n        60,\n        {\"download\": True}\n    )\n)\n```",
      "line_start": 3040,
      "line_end": 3091,
      "category": "Storage",
      "examples": [
        "Create Signed URL",
        "Create a signed URL for an asset with transformations",
        "Create a signed URL which triggers the download of the asset"
      ],
      "code_blocks": [
        "response = (\n    supabase.storage\n    .from_(\"avatars\")\n    .create_signed_url(\n        \"folder/avatar1.png\",\n        60\n    )\n)",
        "response = (\n    supabase.storage\n    .from_(\"avatars\")\n    .create_signed_url(\n        \"folder/avatar1.png\",\n        60,\n        {\"transform\": {\"width\": 100, \"height\": 100}}\n    )\n)",
        "response = (\n    supabase.storage\n    .from_(\"avatars\")\n    .create_signed_url(\n        \"folder/avatar1.png\",\n        60,\n        {\"download\": True}\n    )\n)"
      ]
    },
    {
      "title": "from_.create_signed_urls()",
      "description": "Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.",
      "content": "Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n\n## Examples\n\n### Create Signed URLs\n\n```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .create_signed_urls(\n        [\"folder/avatar1.png\", \"folder/avatar2.png\"],\n        60\n    )\n)\n```",
      "line_start": 3092,
      "line_end": 3113,
      "category": "Storage",
      "examples": [
        "Create Signed URLs"
      ],
      "code_blocks": [
        "response = (\n    supabase.storage\n    .from_(\"avatars\")\n    .create_signed_urls(\n        [\"folder/avatar1.png\", \"folder/avatar2.png\"],\n        60\n    )\n)"
      ]
    },
    {
      "title": "from_.create_signed_upload_url()",
      "description": "Creates a signed upload URL. Signed upload URLs can be used to upload files to the bucket without further authentication. They are valid for 2 hours.",
      "content": "Creates a signed upload URL. Signed upload URLs can be used to upload files to the bucket without further authentication. They are valid for 2 hours.\n\n## Examples\n\n### Create Signed URL\n\n```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .create_signed_upload_url(\"folder/avatar1.png\")\n)\n```",
      "line_start": 3114,
      "line_end": 3132,
      "category": "Storage",
      "examples": [
        "Create Signed URL"
      ],
      "code_blocks": [
        "response = (\n    supabase.storage\n    .from_(\"avatars\")\n    .create_signed_upload_url(\"folder/avatar1.png\")\n)"
      ]
    },
    {
      "title": "from_.upload_to_signed_url()",
      "description": "Upload a file with a token generated from `create_signed_upload_url`.",
      "content": "Upload a file with a token generated from `create_signed_upload_url`.\n\n## Examples\n\n### Create Signed URL\n\n```python\nwith open(\"./public/avatar1.png\", \"rb\") as f:\n    response = (\n        supabase.storage\n        .from_(\"avatars\")\n        .upload_to_signed_url(\n            path=\"folder/cat.jpg\",\n            token=\"token-from-create_signed_upload_url\",\n            file=f,\n        )\n    )\n```",
      "line_start": 3133,
      "line_end": 3156,
      "category": "Storage",
      "examples": [
        "Create Signed URL"
      ],
      "code_blocks": [
        "with open(\"./public/avatar1.png\", \"rb\") as f:\n    response = (\n        supabase.storage\n        .from_(\"avatars\")\n        .upload_to_signed_url(\n            path=\"folder/cat.jpg\",\n            token=\"token-from-create_signed_upload_url\",\n            file=f,\n        )\n    )"
      ]
    },
    {
      "title": "from_.get_public_url()",
      "description": "A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset. This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.",
      "content": "A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset. This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n\n\n## Examples\n\n### Returns the URL for an asset in a public bucket\n\n```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .get_public_url(\"folder/avatar1.jpg\")\n)\n```\n\n\n### Returns the URL for an asset in a public bucket with transformations\n\n```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .get_public_url(\n        \"folder/avatar1.jpg\",\n        {\"transform\": {\"width\": 100, \"height\": 100}}\n    )\n)\n```\n\n\n### Returns the URL which triggers the download of an asset in a public bucket\n\n```python\nresponse = (\n    supabase.storage\n    .from_(\"avatars\")\n    .get_public_url(\n        \"folder/avatar1.jpg\",\n        {\"download\": True}\n    )\n)\n```",
      "line_start": 3157,
      "line_end": 3202,
      "category": "Storage",
      "examples": [
        "Returns the URL for an asset in a public bucket",
        "Returns the URL for an asset in a public bucket with transformations",
        "Returns the URL which triggers the download of an asset in a public bucket"
      ],
      "code_blocks": [
        "response = (\n    supabase.storage\n    .from_(\"avatars\")\n    .get_public_url(\"folder/avatar1.jpg\")\n)",
        "response = (\n    supabase.storage\n    .from_(\"avatars\")\n    .get_public_url(\n        \"folder/avatar1.jpg\",\n        {\"transform\": {\"width\": 100, \"height\": 100}}\n    )\n)",
        "response = (\n    supabase.storage\n    .from_(\"avatars\")\n    .get_public_url(\n        \"folder/avatar1.jpg\",\n        {\"download\": True}\n    )\n)"
      ]
    }
  ]
}